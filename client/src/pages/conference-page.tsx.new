import React, { useEffect, useState, useRef } from 'react';
import { useLocation, useRoute } from 'wouter';
import { useQuery } from '@tanstack/react-query';
import { useWebRTC } from '@/contexts/WebRTCContext';
import { useAuth } from '@/hooks/use-auth';
import { Conference, Participant } from '@/types';
import ParticipantVideo from '@/components/ParticipantVideo';
import VideoControls from '@/components/VideoControls';
import { Button } from '@/components/ui/button';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { MessageCircle } from 'lucide-react';
import { useIsMobile } from '@/hooks/use-mobile';
import JoinConferenceModal from '@/components/JoinConferenceModal';
import { Spinner } from '@/components/ui/spinner';

export default function ConferencePage() {
  const [locationPath, setLocation] = useLocation();
  const { user } = useAuth();
  const isMobile = useIsMobile();
  const [showChat, setShowChat] = useState(false);
  const [chatMessage, setChatMessage] = useState('');
  const [showParticipantsList, setShowParticipantsList] = useState(!isMobile);
  const scrollRef = useRef<HTMLDivElement>(null);
  const [joinModalOpen, setJoinModalOpen] = useState(true);
  
  // Получаем ID конференции из параметров URL с помощью useRoute
  const [match, params] = useRoute('/conference/:id');
  const conferenceId = params?.id;
  const { data: conferenceData, isLoading } = useQuery<{ conference: Conference }>({
    queryKey: ['/api/conferences', conferenceId],
    enabled: !!conferenceId
  });
  
  const { 
    participants, 
    remoteStreams,
    localStream,
    raisedHands,
    chatMessages,
    isHandRaised,
    focusedParticipantId,
    joinConference,
    leaveConference,
    sendChatMessage,
    toggleHand
  } = useWebRTC();
  
  useEffect(() => {
    return () => {
      leaveConference();
    };
  }, [leaveConference]);
  
  useEffect(() => {
    // Scroll to bottom of chat when new messages arrive
    if (scrollRef.current) {
      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;
    }
  }, [chatMessages]);
  
  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault();
    if (chatMessage.trim()) {
      sendChatMessage(chatMessage);
      setChatMessage('');
    }
  };
  
  const handleOpenChat = () => {
    setShowChat(true);
    if (isMobile) {
      setShowParticipantsList(false);
    }
  };
  
  const handleJoinSuccess = (conference: Conference) => {
    setJoinModalOpen(false);
  };
  
  const handleLeave = () => {
    leaveConference();
    setLocation('/');
  };
  
  if (isLoading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <Spinner size="lg" />
      </div>
    );
  }
  
  if (!conferenceData?.conference) {
    return (
      <div className="flex items-center justify-center h-screen flex-col gap-4">
        <h1 className="text-2xl font-bold">Конференция не найдена</h1>
        <p className="text-muted-foreground">Указанная конференция не существует или была завершена</p>
        <Button onClick={() => setLocation('/')}>Вернуться на главную</Button>
      </div>
    );
  }
  
  const conference = conferenceData.conference;
  
  // Create local participant object
  const localParticipant: Participant = {
    id: 'local',
    name: user?.name || 'Вы',
    isAdmin: user?.isAdmin || false,
    videoEnabled: !!localStream && localStream.getVideoTracks().length > 0 ? localStream.getVideoTracks()[0].enabled : false,
    audioEnabled: !!localStream && localStream.getAudioTracks().length > 0 ? localStream.getAudioTracks()[0].enabled : false
  };
  
  // Determine focused participant
  const focusedParticipant = focusedParticipantId 
    ? (focusedParticipantId === 'local' 
      ? localParticipant 
      : participants.find(p => p.id === focusedParticipantId))
    : null;
    
  const focusedStream = focusedParticipantId === 'local' 
    ? localStream 
    : remoteStreams.get(focusedParticipantId || '');
  
  return (
    <>
      <JoinConferenceModal
        open={joinModalOpen}
        onOpenChange={setJoinModalOpen}
        conferenceId={conferenceId}
        onJoinSuccess={handleJoinSuccess}
      />
      
      <div className="flex flex-col h-screen bg-background">
        <header className="border-b p-3 flex justify-between items-center">
          <h1 className="text-xl font-bold truncate">{conference.name}</h1>
          <div className="flex items-center gap-2">
            {isHandRaised && (
              <span className="text-amber-500 flex items-center text-sm">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                  <path d="M18 11V6a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0"></path>
                  <path d="M14 10V4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v2"></path>
                  <path d="M10 10.5V6a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v8"></path>
                  <path d="M18 8a2 2 0 1 1 4 0v6a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15"></path>
                </svg>
                Рука поднята
              </span>
            )}
            <Button variant="outline" size="sm" onClick={handleLeave}>Выйти</Button>
          </div>
        </header>
        
        <div className="flex flex-1 overflow-hidden">
          {/* Main video area */}
          <div className={`flex-1 ${showParticipantsList || showChat ? 'hidden md:flex' : 'flex'} flex-col p-4 overflow-hidden`}>
            {/* Focused participant or main grid */}
            <div className="flex-1 overflow-hidden flex items-center justify-center">
              {focusedParticipant ? (
                <ParticipantVideo 
                  participant={focusedParticipant} 
                  stream={focusedStream} 
                  isFocused={true}
                  isRaised={raisedHands.includes(focusedParticipant.id)}
                />
              ) : (
                <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 w-full h-full overflow-auto p-2">
                  {/* Local participant first */}
                  <ParticipantVideo 
                    participant={localParticipant}
                    stream={localStream}
                    isRaised={isHandRaised} 
                  />
                  
                  {/* Remote participants */}
                  {participants.map(participant => (
                    <ParticipantVideo 
                      key={participant.id}
                      participant={participant}
                      stream={remoteStreams.get(participant.id)}
                      isRaised={raisedHands.includes(participant.id)}
                      onClick={() => !focusedParticipantId ? null : null}
                    />
                  ))}
                </div>
              )}
            </div>
            
            {/* Video controls */}
            <VideoControls 
              onOpenChat={handleOpenChat}
              onLeave={handleLeave}
              onToggleParticipantsList={() => setShowParticipantsList(!showParticipantsList)}
              participantsListOpen={showParticipantsList}
              conferenceId={conferenceId}
            />
          </div>
          
          {/* Sidebar: Participants list or chat */}
          {(showParticipantsList || showChat) && (
            <div className={`${isMobile ? 'w-full' : 'w-80'} border-l bg-card flex flex-col h-full`}>
              <Tabs defaultValue={showChat ? 'chat' : 'participants'}>
                <div className="p-3 border-b">
                  <TabsList className="w-full">
                    <TabsTrigger 
                      value="participants" 
                      className="flex-1"
                      onClick={() => {
                        setShowParticipantsList(true);
                        setShowChat(false);
                      }}
                    >
                      Участники ({participants.length + 1})
                    </TabsTrigger>
                    <TabsTrigger 
                      value="chat" 
                      className="flex-1"
                      onClick={() => {
                        setShowChat(true);
                        setShowParticipantsList(false);
                      }}
                    >
                      Чат {chatMessages.length > 0 && <span className="ml-1 text-xs">({chatMessages.length})</span>}
                    </TabsTrigger>
                  </TabsList>
                </div>
                
                <TabsContent value="participants" className="flex-1 overflow-hidden flex flex-col">
                  <ScrollArea className="flex-1">
                    <div className="p-4 space-y-4">
                      <div className="space-y-2">
                        <h3 className="text-sm font-medium">Вы</h3>
                        <div className="flex items-center gap-3 p-2 rounded-lg bg-muted/50">
                          <div className="w-8 h-8 rounded-full bg-gradient-to-br from-purple-500 to-indigo-500 flex items-center justify-center">
                            <span className="text-white font-medium text-sm">{user?.name?.charAt(0) || 'U'}</span>
                          </div>
                          <div className="flex-1 min-w-0">
                            <p className="font-medium truncate">{user?.name || 'Вы'}</p>
                            <p className="text-xs text-muted-foreground">
                              {user?.isAdmin ? 'Администратор' : 'Участник'}
                            </p>
                          </div>
                        </div>
                      </div>
                      
                      {participants.length > 0 && (
                        <div className="space-y-2">
                          <h3 className="text-sm font-medium">Другие участники</h3>
                          {participants.map(participant => (
                            <div key={participant.id} className="flex items-center gap-3 p-2 rounded-lg bg-muted/50">
                              <div className="w-8 h-8 rounded-full bg-gradient-to-br from-purple-500 to-indigo-500 flex items-center justify-center">
                                <span className="text-white font-medium text-sm">{participant.name.charAt(0)}</span>
                              </div>
                              <div className="flex-1 min-w-0">
                                <p className="font-medium truncate">{participant.name}</p>
                                <p className="text-xs text-muted-foreground">
                                  {participant.isAdmin ? 'Администратор' : 'Участник'}
                                  {raisedHands.includes(participant.id) && (
                                    <span className="ml-2 text-amber-500">Поднял руку</span>
                                  )}
                                </p>
                              </div>
                              <div className="flex gap-1">
                                {!participant.audioEnabled && (
                                  <span className="p-1 rounded-full bg-red-500/10" title="Микрофон выключен">
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-red-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                      <line x1="1" y1="1" x2="23" y2="23"></line>
                                      <path d="M9 9v3a3 3 0 0 0 5.12 2.12M15 9.34V4a3 3 0 0 0-5.94-.6"></path>
                                      <path d="M17 16.95A7 7 0 0 1 5 12v-2m14 0v2a7 7 0 0 1-.11 1.23"></path>
                                      <line x1="12" y1="19" x2="12" y2="23"></line>
                                      <line x1="8" y1="23" x2="16" y2="23"></line>
                                    </svg>
                                  </span>
                                )}
                                {!participant.videoEnabled && (
                                  <span className="p-1 rounded-full bg-red-500/10" title="Камера выключена">
                                    <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 text-red-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                      <path d="M16 16v1a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h2m5.66 0H14a2 2 0 0 1 2 2v3.34l1 1L23 7v10"></path>
                                      <line x1="1" y1="1" x2="23" y2="23"></line>
                                    </svg>
                                  </span>
                                )}
                              </div>
                            </div>
                          ))}
                        </div>
                      )}
                    </div>
                  </ScrollArea>
                  
                  <div className="p-4 border-t">
                    <Button 
                      variant="outline" 
                      className="w-full"
                      onClick={toggleHand}
                    >
                      {isHandRaised ? (
                        <>
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2 text-amber-500" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <path d="M18 11V6a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0"></path>
                            <path d="M14 10V4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v2"></path>
                            <path d="M10 10.5V6a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v8"></path>
                            <path d="M18 8a2 2 0 1 1 4 0v6a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15"></path>
                          </svg>
                          Опустить руку
                        </>
                      ) : (
                        <>
                          <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                            <path d="M18 11V6a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v0"></path>
                            <path d="M14 10V4a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v2"></path>
                            <path d="M10 10.5V6a2 2 0 0 0-2-2v0a2 2 0 0 0-2 2v8"></path>
                            <path d="M18 8a2 2 0 1 1 4 0v6a8 8 0 0 1-8 8h-2c-2.8 0-4.5-.86-5.99-2.34l-3.6-3.6a2 2 0 0 1 2.83-2.82L7 15"></path>
                          </svg>
                          Поднять руку
                        </>
                      )}
                    </Button>
                  </div>
                </TabsContent>
                
                <TabsContent value="chat" className="flex-1 overflow-hidden flex flex-col">
                  <ScrollArea className="flex-1" ref={scrollRef}>
                    <div className="p-4 space-y-4">
                      {chatMessages.length === 0 ? (
                        <div className="flex flex-col items-center justify-center h-40 text-center">
                          <MessageCircle className="h-12 w-12 text-muted-foreground/50 mb-2" />
                          <p className="text-muted-foreground">Нет сообщений в чате</p>
                          <p className="text-xs text-muted-foreground">Будьте первым, кто напишет!</p>
                        </div>
                      ) : (
                        chatMessages.map(message => {
                          const isYou = message.senderId === 'local';
                          return (
                            <div key={message.id} className={`flex flex-col ${isYou ? 'items-end' : 'items-start'}`}>
                              <div className={`max-w-[80%] rounded-lg px-3 py-2 ${
                                isYou 
                                  ? 'bg-primary text-primary-foreground rounded-br-none' 
                                  : 'bg-muted rounded-bl-none'
                              }`}>
                                <div className="flex items-center gap-1 mb-1">
                                  <span className="font-medium text-xs">
                                    {isYou ? 'Вы' : message.senderName}
                                  </span>
                                  {message.isAdmin && (
                                    <span className="text-[10px] px-1 py-0.5 rounded bg-primary/20 text-primary-foreground/80">
                                      Админ
                                    </span>
                                  )}
                                </div>
                                <p className="break-words">{message.text}</p>
                                <span className="text-[10px] opacity-70 block text-right mt-1">
                                  {new Date(message.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                                </span>
                              </div>
                            </div>
                          );
                        })
                      )}
                    </div>
                  </ScrollArea>
                  
                  <div className="p-3 border-t">
                    <form onSubmit={handleSendMessage} className="flex items-center gap-2">
                      <input
                        type="text"
                        value={chatMessage}
                        onChange={(e) => setChatMessage(e.target.value)}
                        placeholder="Напишите сообщение..."
                        className="flex-1 p-2 text-sm bg-muted rounded-md focus:outline-none focus:ring-1 focus:ring-primary"
                      />
                      <Button type="submit" size="sm" disabled={!chatMessage.trim()}>
                        <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                          <line x1="22" y1="2" x2="11" y2="13"></line>
                          <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
                        </svg>
                      </Button>
                    </form>
                  </div>
                </TabsContent>
              </Tabs>
            </div>
          )}
        </div>
      </div>
    </>
  );
}