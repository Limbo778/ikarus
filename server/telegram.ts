import TelegramBot from 'node-telegram-bot-api';
import { scrypt, randomBytes, timingSafeEqual } from "crypto";
import { promisify } from "util";
import { storage } from './storage';
import { User, TelegramSettings, subscriptionTypeEnum, telegramSettings, users, conferences, payments } from '@shared/schema';
import { eq, desc, and, gte } from 'drizzle-orm';
import { sql } from 'drizzle-orm/sql';
import { db } from './db';

// –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –∏–º–µ–Ω –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
enum ActionNamespace {
  MENU = 'menu',   // –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
  CONF = 'conf',   // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏
  JOIN = 'join',   // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
  SUB = 'sub',     // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
  ADMIN = 'adm',   // –§—É–Ω–∫—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  CREATE = 'create', // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
}

// –¢–∏–ø—ã –º–µ–Ω—é
enum MenuType {
  MAIN = 'main',         // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
  CONFERENCES = 'confs', // –ú–µ–Ω—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
  PROFILE = 'profile',   // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  SUBSCRIPTION = 'subs', // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
  ADMIN = 'admin',       // –ú–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  CREATE_CONF = 'create', // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
  JOIN_CONF = 'join',     // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
interface MenuButton {
  text: string;
  callback_data: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
interface CreateConferenceState {
  stage: 'name' | 'confirming';
  name?: string;
  timestamp: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
interface JoinConferenceState {
  stage: 'id' | 'confirming';
  conferenceId?: string;
  timestamp: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
interface AuthState {
  stage: 'username' | 'password';
  username?: string;
  timestamp: number;
}

const scryptAsync = promisify(scrypt);

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
const SUBSCRIPTION_PRICES = {
  free: 0,
  pro: {
    month: 79900, // 799 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü
    year: 799900, // 7999 —Ä—É–±–ª–µ–π –≤ –≥–æ–¥ (—ç–∫–æ–Ω–æ–º–∏—è 15%)
  }
};

const SUBSCRIPTION_DURATIONS = {
  month: 30 * 24 * 60 * 60 * 1000, // 30 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  year: 365 * 24 * 60 * 60 * 1000, // 365 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
};

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º
export class TelegramService {
  private static instance: TelegramService;
  
  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Å–µ—Ä–≤–∏—Å–∞ (Singleton)
  public static async getInstance(): Promise<TelegramService> {
    if (!TelegramService.instance) {
      TelegramService.instance = new TelegramService();
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
      await TelegramService.instance.initialize();
    }
    return TelegramService.instance;
  }
  
  private bot: TelegramBot | null = null;
  private settings: TelegramSettings | null = null;
  private isInitialized = false;
  
  // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–Ω—é
  private userStates: Map<number, {
    activeMenu?: MenuType;
    lastMenuMessageId?: number;
    createConferenceState?: CreateConferenceState;
    joinConferenceState?: JoinConferenceState;
    authState?: AuthState;
  }> = new Map();
  
  // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è Singleton
  private constructor() {}

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  async initialize(): Promise<boolean> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      this.settings = await storage.getTelegramSettings();
      
      if (!this.settings || !this.settings.botToken) {
        console.error('Telegram bot token not found in database');
        return false;
      }
      
      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
      this.bot = new TelegramBot(this.settings.botToken, { polling: true });
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      this.setupMessageHandlers();
      
      this.isInitialized = true;
      return true;
    } catch (error) {
      console.error('Failed to initialize Telegram bot:', error);
      return false;
    }
  }
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
  async init(botToken: string): Promise<boolean> {
    try {
      if (!botToken) {
        console.error('No Telegram bot token provided');
        return false;
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      let settings = await storage.getTelegramSettings();
      
      if (settings) {
        settings = await storage.updateTelegramSettings({
          botToken,
          isConnected: true,
          connectedAt: new Date()
        });
      } else {
        settings = await storage.saveTelegramSettings({
          botToken,
          isConnected: true,
          connectedAt: new Date()
        });
      }
      
      this.settings = settings;
      
      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
      if (this.bot) {
        try {
          this.bot.stopPolling();
        } catch (e) {
          console.log('Error stopping existing bot', e);
        }
      }
      
      this.bot = new TelegramBot(botToken, { polling: true });
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
      this.setupMessageHandlers();
      
      this.isInitialized = true;
      console.log('Telegram bot initialized successfully with new token');
      return true;
    } catch (error) {
      console.error('Failed to initialize Telegram bot with new token:', error);
      return false;
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  private getUserState(chatId: number) {
    if (!this.userStates.has(chatId)) {
      this.userStates.set(chatId, {});
    }
    return this.userStates.get(chatId)!;
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
  private createButton(text: string, namespace: ActionNamespace, action: string, param: string = ''): MenuButton {
    return {
      text,
      callback_data: `${namespace}:${action}${param ? `:${param}` : ''}`
    };
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
  private async createMainMenuKeyboard(user: User): Promise<TelegramBot.InlineKeyboardButton[][]> {
    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [
        this.createButton('üóì –ú–æ–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏', ActionNamespace.MENU, MenuType.CONFERENCES),
        this.createButton('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', ActionNamespace.MENU, MenuType.PROFILE)
      ],
      [
        this.createButton('‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é', ActionNamespace.CREATE, 'start'),
        this.createButton('üîç –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', ActionNamespace.JOIN, 'start')
      ],
      [
        this.createButton('üí≥ –ü–æ–¥–ø–∏—Å–∫–∞', ActionNamespace.MENU, MenuType.SUBSCRIPTION)
      ]
    ];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∞
    if (user.role === 'admin' || user.role === 'superadmin') {
      keyboard.push([
        this.createButton('‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', ActionNamespace.MENU, MenuType.ADMIN)
      ]);
    }
    
    return keyboard;
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  private async sendMainMenu(chatId: number, user: User) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    const subIcon = user.subscriptionType === 'pro' ? 'üåü' : 'üåô';
    const subName = user.subscriptionType === 'pro' ? 'Pro' : 'Free';
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    const welcomeMessage = `
üöÄ <b>Ikarus</b> - –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
    
üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>${user.name || user.username}</b>!
${subIcon} –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: <b>${subName}</b>${user.subscriptionExpiresAt ? ` (–¥–æ ${user.subscriptionExpiresAt.toLocaleDateString()})` : ''}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
`;
    
    // –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = await this.createMainMenuKeyboard(user);
    
    try {
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –±—ã–ª–æ –º–µ–Ω—é, —É–¥–∞–ª—è–µ–º –µ–≥–æ
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
      const message = await this.bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      state.lastMenuMessageId = message.message_id;
      state.activeMenu = MenuType.MAIN;
    } catch (error) {
      console.error('Error sending main menu:', error);
    }
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
  private setupMessageHandlers() {
    if (!this.bot) return;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (–º–µ–Ω—é)
    this.bot.on('callback_query', async (query) => {
      if (!query.message || !query.data || !query.from) return;
      
      const chatId = query.message.chat.id;
      const telegramId = query.from.id.toString();
      
      // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback
      const [namespace, action, param] = query.data.split(':');
      
      try {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
        if (namespace === 'admin') {
          // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
          const adminUser = await storage.getUserByTelegramId(telegramId);
          
          if (!adminUser || (adminUser.role !== 'admin' && adminUser.role !== 'superadmin')) {
            await this.bot?.answerCallbackQuery(query.id, {
              text: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
              show_alert: true
            });
            return;
          }
          
          // –ï—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ - –≤–æ–∑–≤—Ä–∞—Ç –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          if (action === 'back') {
            await this.showAdminPanel(chatId, adminUser);
          } else {
            // –ò–Ω–∞—á–µ –ø–µ—Ä–µ–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥
            await this.handleAdminCallbacks(query.data, query);
          }
          
          // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
          await this.bot?.answerCallbackQuery(query.id);
          return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞)
        if (namespace === 'auth') {
          // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const state = this.getUserState(chatId);
          
          switch (action) {
            case 'login':
              if (param === 'start') {
                // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞
                await this.sendUsernamePrompt(chatId);
              }
              break;
            case 'help':
              // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              await this.sendAuthHelp(chatId);
              break;
            case 'back':
              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—å–Ω–æ–º—É —ç–∫—Ä–∞–Ω—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              await this.sendRegistrationInstructions(chatId);
              break;
            case 'cancel':
              // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
              state.authState = undefined;
              await this.sendRegistrationInstructions(chatId);
              break;
          }
          
          // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
          await this.bot?.answerCallbackQuery(query.id);
          return;
        }
        
        // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await storage.getUserByTelegramId(telegramId);
        
        if (!user) {
          await this.bot?.sendMessage(chatId, 
            '‚ö†Ô∏è –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Ö–æ–¥–∞.'
          );
          await this.sendRegistrationInstructions(chatId);
          return;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–Ω—é
        if (namespace === ActionNamespace.MENU) {
          switch (action) {
            case MenuType.MAIN:
              await this.sendMainMenu(chatId, user);
              break;
            case MenuType.CONFERENCES:
              await this.sendConferencesMenu(chatId, user);
              break;
            case MenuType.PROFILE:
              await this.sendProfileMenu(chatId, user);
              break;
            case MenuType.SUBSCRIPTION:
              await this.sendSubscriptionMenu(chatId, user);
              break;
            case MenuType.ADMIN:
              // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–ª—è Telegram
              if (user.role === 'admin' || user.role === 'superadmin') {
                await this.showAdminPanel(chatId, user);
              } else {
                await this.bot.sendMessage(chatId, "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞");
              }
              break;
          }
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
        else if (namespace === ActionNamespace.CREATE) {
          if (action === 'start') {
            // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
            const state = this.getUserState(chatId);
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
            if (state.lastMenuMessageId) {
              try {
                await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
              } catch (e) {
                console.log('Could not delete previous menu message', e);
              }
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
            state.createConferenceState = {
              stage: 'name',
              timestamp: Date.now()
            };
            
            const message = await this.bot.sendMessage(chatId, 
              '‚úèÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ (–Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤):',
              {
                reply_markup: {
                  inline_keyboard: [[
                    this.createButton('¬´ –û—Ç–º–µ–Ω–∞', ActionNamespace.MENU, MenuType.MAIN)
                  ]]
                }
              }
            );
            
            state.lastMenuMessageId = message.message_id;
          }
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
        else if (namespace === ActionNamespace.JOIN) {
          if (action === 'start') {
            // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
            const state = this.getUserState(chatId);
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
            if (state.lastMenuMessageId) {
              try {
                await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
              } catch (e) {
                console.log('Could not delete previous menu message', e);
              }
            }
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            state.joinConferenceState = {
              stage: 'id',
              timestamp: Date.now()
            };
            
            const message = await this.bot.sendMessage(chatId, 
              'üÜî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:',
              {
                reply_markup: {
                  inline_keyboard: [[
                    this.createButton('¬´ –û—Ç–º–µ–Ω–∞', ActionNamespace.MENU, MenuType.MAIN)
                  ]]
                }
              }
            );
            
            state.lastMenuMessageId = message.message_id;
          }
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π
        else if (namespace === ActionNamespace.SUB) {
          if (action === 'month') {
            // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            await this.subscribeUser(chatId, telegramId, 'pro-month');
            // –ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            await this.sendProfileMenu(chatId, await storage.getUserByTelegramId(telegramId) as User);
          }
          else if (action === 'year') {
            // –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –≥–æ–¥–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            await this.subscribeUser(chatId, telegramId, 'pro-year');
            // –ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
            await this.sendProfileMenu(chatId, await storage.getUserByTelegramId(telegramId) as User);
          }
          else if (action === 'topup') {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞
            await this.bot.sendMessage(chatId, 
              'üí≥ –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç https://ikarus.app/payments –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
            );
          }
        }
        
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
        await this.bot.answerCallbackQuery(query.id);
        
      } catch (error) {
        console.error('Error handling callback query:', error);
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    this.bot.onText(/\/start/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      
      if (!telegramId) return;
      
      const user = await storage.getUserByTelegramId(telegramId);
      
      if (user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await this.sendWelcomeBackMessage(chatId, user);
      } else {
        // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await this.sendRegistrationInstructions(chatId);
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
    this.bot.onText(/\/help/, async (msg) => {
      const chatId = msg.chat.id;
      await this.sendHelpMessage(chatId);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /conferences - –ø–æ–∫–∞–∑–∞—Ç—å –º–æ–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    this.bot.onText(/\/conferences/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      
      if (!telegramId) return;
      
      await this.sendUserConferences(chatId, telegramId);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /join - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø–æ ID
    this.bot.onText(/\/join (.+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      
      if (!telegramId || !match || !match[1]) return;
      
      const conferenceId = match[1].trim();
      await this.joinConference(chatId, telegramId, conferenceId);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /create - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é
    this.bot.onText(/\/create (.+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      
      if (!telegramId || !match || !match[1]) return;
      
      const conferenceName = match[1].trim();
      await this.createConference(chatId, telegramId, conferenceName);
    });
    

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /register
    this.bot.onText(/\/register (.+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      
      if (!telegramId || !match || !match[1]) return;
      
      const credentials = match[1].split(' ');
      
      if (credentials.length < 2) {
        await this.bot?.sendMessage(chatId, 
          '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /register username password'
        );
        return;
      }
      
      const username = credentials[0];
      const password = credentials.slice(1).join(' ');
      
      await this.registerUser(chatId, telegramId, username, password);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
    this.bot.onText(/\/status/, async (msg) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      
      if (!telegramId) return;
      
      await this.sendUserStatus(chatId, telegramId);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscribe
    this.bot.onText(/\/subscribe (.+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      
      if (!telegramId || !match || !match[1]) return;
      
      const plan = match[1].toLowerCase();
      
      if (plan !== 'pro-month' && plan !== 'pro-year') {
        await this.bot?.sendMessage(chatId, 
          '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã: pro-month, pro-year'
        );
        return;
      }
      
      await this.subscribeUser(chatId, telegramId, plan);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ /admin
    this.bot.onText(/\/admin (.+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      
      if (!telegramId || !match || !match[1]) return;
      
      const password = match[1];
      
      await this.handleAdminAuth(chatId, telegramId, password);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    this.bot.onText(/\/user (.+)/, async (msg, match) => {
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      
      if (!telegramId || !match || !match[1]) return;
      
      const user = await storage.getUserByTelegramId(telegramId);
      
      if (!user || (user.role !== 'admin' && user.role !== 'superadmin')) {
        await this.bot?.sendMessage(chatId, '‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        return;
      }
      
      const args = match[1].split(' ');
      const command = args[0].toLowerCase();
      
      switch (command) {
        case 'list':
          await this.listUsers(chatId);
          break;
        case 'info':
          if (args.length < 2) {
            await this.bot?.sendMessage(chatId, '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /user info username');
            return;
          }
          await this.getUserInfo(chatId, args[1]);
          break;
        case 'ban':
          if (args.length < 2) {
            await this.bot?.sendMessage(chatId, '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /user ban username –ø—Ä–∏—á–∏–Ω–∞');
            return;
          }
          const reason = args.length > 2 ? args.slice(2).join(' ') : '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª';
          await this.banUser(chatId, args[1], reason);
          break;
        case 'unban':
          if (args.length < 2) {
            await this.bot?.sendMessage(chatId, '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /user unban username');
            return;
          }
          await this.unbanUser(chatId, args[1]);
          break;
        case 'upgrade':
          if (args.length < 3) {
            await this.bot?.sendMessage(chatId, '‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: /user upgrade username pro');
            return;
          }
          await this.upgradeUserSubscription(chatId, args[1], args[2]);
          break;
        default:
          await this.bot?.sendMessage(chatId, 
            '‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n' +
            '/user list - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' +
            '/user info username - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n' +
            '/user ban username –ø—Ä–∏—á–∏–Ω–∞ - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
            '/user unban username - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
            '/user upgrade username —Ç–∏–ø - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
          );
      }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    this.bot.on('message', async (msg) => {
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –∫–æ–º–∞–Ω–¥–∞–º–∏
      if (!msg.text || msg.text.startsWith('/')) return;
      
      const chatId = msg.chat.id;
      const telegramId = msg.from?.id.toString();
      const messageText = msg.text;
      
      if (!telegramId) return;
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        const state = this.getUserState(chatId);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        if (state.authState) {
          if (state.authState.stage === 'username') {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const username = messageText.trim();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (username.length < 3) {
              const errorMsg = await this.bot?.sendMessage(chatId, 
                '‚ö†Ô∏è –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
                {
                  reply_markup: {
                    inline_keyboard: [[
                      { text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'auth:cancel' }
                    ]]
                  }
                }
              );
              
              if (errorMsg) {
                state.lastMenuMessageId = errorMsg.message_id;
              }
              return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const existingUser = await storage.getUserByUsername(username);
            if (!existingUser) {
              const errorMsg = await this.bot?.sendMessage(chatId, 
                '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ.',
                {
                  reply_markup: {
                    inline_keyboard: [[
                      { text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'auth:cancel' }
                    ]]
                  }
                }
              );
              
              if (errorMsg) {
                state.lastMenuMessageId = errorMsg.message_id;
              }
              return;
            }
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –ø–∞—Ä–æ–ª—è
            await this.sendPasswordPrompt(chatId, username);
            return;
          }
          else if (state.authState.stage === 'password') {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –ø–∞—Ä–æ–ª—å
            const password = messageText;
            const username = state.authState.username;
            
            if (!username) {
              // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
              await this.sendRegistrationInstructions(chatId);
              return;
            }
            
            // –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞
            await this.registerUser(chatId, telegramId, username, password);
            
            // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            state.authState = undefined;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—Ö–æ–¥–∞
            const user = await storage.getUserByTelegramId(telegramId);
            if (user) {
              // –í—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
              await this.sendMainMenu(chatId, user);
            }
            return;
          }
        }
        
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        const user = await storage.getUserByTelegramId(telegramId);
        if (!user) {
          await this.sendRegistrationInstructions(chatId);
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
        if (state.createConferenceState && state.createConferenceState.stage === 'name') {
          // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
          if (state.lastMenuMessageId) {
            try {
              await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
            } catch (e) {
              console.log('Could not delete previous message', e);
            }
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
          if (messageText.length < 3) {
            const errorMsg = await this.bot.sendMessage(chatId, 
              '‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:',
              {
                reply_markup: {
                  inline_keyboard: [[
                    this.createButton('¬´ –û—Ç–º–µ–Ω–∞', ActionNamespace.MENU, MenuType.MAIN)
                  ]]
                }
              }
            );
            
            state.lastMenuMessageId = errorMsg.message_id;
            return;
          }
          
          // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é
          await this.createConference(chatId, telegramId, messageText);
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è
          state.createConferenceState = undefined;
          
          // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
          await this.sendConferencesMenu(chatId, user);
          return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
        if (state.joinConferenceState && state.joinConferenceState.stage === 'id') {
          // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
          if (state.lastMenuMessageId) {
            try {
              await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
            } catch (e) {
              console.log('Could not delete previous message', e);
            }
          }
          
          // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø–æ ID
          await this.joinConference(chatId, telegramId, messageText);
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          state.joinConferenceState = undefined;
          
          // –ü–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –ø–∞—É–∑—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          setTimeout(async () => {
            await this.sendMainMenu(chatId, user);
          }, 2000);
          
          return;
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–≤–æ–¥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        if (user.role === 'admin' || user.role === 'superadmin') {
          // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é –∏–ª–∏ —Å–ø—Ä–∞–≤–∫—É
          await this.sendMainMenu(chatId, user);
        } else {
          // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
          await this.sendMainMenu(chatId, user);
        }
      } catch (error) {
        console.error('Error handling message:', error);
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
      }
    });
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  private async sendWelcomeBackMessage(chatId: number, user: User) {
    if (!this.bot) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–µ–Ω—é –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await this.sendMainMenu(chatId, user);
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
  private async sendConferencesMenu(chatId: number, user: User) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const conferences = await storage.getConferencesByUserId(user.id);
      
      // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
      const activeConferences = conferences.filter(conf => conf.active);
      const endedConferences = conferences.filter(conf => !conf.active).sort((a, b) => 
        (b.endedAt?.getTime() || 0) - (a.endedAt?.getTime() || 0)
      ).slice(0, 5);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = `<b>üóì –í–∞—à–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏</b>\n\n`;
      
      if (activeConferences.length === 0 && endedConferences.length === 0) {
        message += '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π.\n–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é"';
      } else {
        if (activeConferences.length > 0) {
          message += `<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:</b>\n`;
          activeConferences.forEach((conf, index) => {
            const startedAt = conf.startedAt || conf.createdAt;
            message += `${index + 1}. <b>${conf.name}</b>\n`;
            message += `   ID: <code>${conf.id}</code>\n`;
            message += `   –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${conf.currentParticipants || 0}/${conf.maxParticipants || 5}\n`;
            message += `   –ù–∞—á–∞–ª–æ: ${startedAt.toLocaleString()}\n\n`;
          });
        }
        
        if (endedConferences.length > 0) {
          message += `<b>–ù–µ–¥–∞–≤–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:</b>\n`;
          endedConferences.forEach((conf, index) => {
            const endedAt = conf.endedAt || new Date();
            message += `${index + 1}. <b>${conf.name}</b>\n`;
            message += `   ID: <code>${conf.id}</code>\n`;
            message += `   –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${endedAt.toLocaleString()}\n`;
            if (conf.recordingUrl) {
              message += `   –ó–∞–ø–∏—Å—å: ${conf.recordingUrl}\n`;
            }
            message += `\n`;
          });
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          this.createButton('‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é', ActionNamespace.CREATE, 'start')
        ],
        [
          this.createButton('üîç –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏', ActionNamespace.JOIN, 'start')
        ]
      ];
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (activeConferences.length > 0) {
        keyboard.push([
          this.createButton('üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ', ActionNamespace.CONF, 'listActive')
        ]);
      }
      
      // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      keyboard.push([
        this.createButton('¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', ActionNamespace.MENU, MenuType.MAIN)
      ]);
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
      const newMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–∏–ø –º–µ–Ω—é
      state.lastMenuMessageId = newMessage.message_id;
      state.activeMenu = MenuType.CONFERENCES;
      
    } catch (error) {
      console.error('Error sending conferences menu:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
  private async sendProfileMenu(chatId: number, user: User) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let message = `<b>üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n`;
      message += `<b>–ò–º—è:</b> ${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      message += `<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${user.username}\n`;
      message += `<b>Email:</b> ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
      message += `<b>–†–æ–ª—å:</b> ${this.translateRole(user.role)}\n\n`;
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
      const subIcon = user.subscriptionType === 'pro' ? 'üåü' : 'üåô';
      const subName = user.subscriptionType === 'pro' ? 'Pro' : 'Free';
      
      message += `<b>${subIcon} –ü–æ–¥–ø–∏—Å–∫–∞:</b> ${subName}\n`;
      
      if (user.subscriptionExpiresAt) {
        const daysLeft = Math.ceil((user.subscriptionExpiresAt.getTime() - Date.now()) / (1000 * 60 * 60 * 24));
        message += `<b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> ${user.subscriptionExpiresAt.toLocaleDateString()}\n`;
        message += `<b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> ${daysLeft > 0 ? daysLeft : '–ò—Å—Ç–µ–∫–ª–∞'}\n\n`;
      } else if (user.subscriptionType === 'pro') {
        message += `<b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> –ë–µ—Å—Å—Ä–æ—á–Ω–æ\n\n`;
      } else {
        message += `\n`;
      }
      
      // –ë–∞–ª–∞–Ω—Å
      const currentBalance = user.balance || 0;
      message += `<b>üí∞ –ë–∞–ª–∞–Ω—Å:</b> ${(currentBalance / 100).toFixed(2)} ‚ÇΩ\n\n`;
      
      message += `<b>üìÜ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ${user.createdAt.toLocaleDateString()}\n`;
      if (user.lastLoginAt) {
        message += `<b>üïí –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥:</b> ${user.lastLoginAt.toLocaleString()}\n`;
      }
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const keyboard: TelegramBot.InlineKeyboardButton[][] = [];
      
      // –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ñ–æ—Ä–º–∏—Ç—å Pro
      if (user.subscriptionType === 'free') {
        keyboard.push([
          this.createButton('‚≠êÔ∏è –û—Ñ–æ—Ä–º–∏—Ç—å Pro –ø–æ–¥–ø–∏—Å–∫—É', ActionNamespace.MENU, MenuType.SUBSCRIPTION)
        ]);
      }
      
      // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      keyboard.push([
        this.createButton('¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', ActionNamespace.MENU, MenuType.MAIN)
      ]);
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
      const newMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–∏–ø –º–µ–Ω—é
      state.lastMenuMessageId = newMessage.message_id;
      state.activeMenu = MenuType.PROFILE;
      
    } catch (error) {
      console.error('Error sending profile menu:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏
  private async sendSubscriptionMenu(chatId: number, user: User) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ
      let message = `<b>üí≥ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n`;
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–ø–∏—Å–∫–µ
      const subIcon = user.subscriptionType === 'pro' ? 'üåü' : 'üåô';
      const subName = user.subscriptionType === 'pro' ? 'Pro' : 'Free';
      
      message += `<b>–¢–µ–∫—É—â–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:</b> ${subIcon} ${subName}\n`;
      
      if (user.subscriptionExpiresAt) {
        const daysLeft = Math.ceil((user.subscriptionExpiresAt.getTime() - Date.now()) / (1000 * 60 * 60 * 24));
        message += `<b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> ${user.subscriptionExpiresAt.toLocaleDateString()}\n`;
        message += `<b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> ${daysLeft > 0 ? daysLeft : '–ò—Å—Ç–µ–∫–ª–∞'}\n\n`;
      } else if (user.subscriptionType === 'pro') {
        message += `<b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> –ë–µ—Å—Å—Ä–æ—á–Ω–æ\n\n`;
      } else {
        message += `\n`;
      }
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–∞—Ö –ø–æ–¥–ø–∏—Å–∫–∏
      message += `<b>üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã:</b>\n\n`;
      message += `<b>üåô Free</b>\n`;
      message += `‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –¥–æ 15 –º–∏–Ω—É—Ç\n`;
      message += `‚Ä¢ –î–æ 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏\n`;
      message += `‚Ä¢ –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–∏–¥–µ–æ—Å–≤—è–∑–∏\n\n`;
      
      message += `<b>üåü Pro</b>\n`;
      message += `‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π\n`;
      message += `‚Ä¢ –î–æ 50 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏\n`;
      message += `‚Ä¢ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞\n`;
      message += `‚Ä¢ –ó–∞–ø–∏—Å—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π\n`;
      message += `‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã\n\n`;
      
      message += `<b>üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å Pro:</b>\n`;
      message += `‚Ä¢ –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: ${(SUBSCRIPTION_PRICES.pro.month / 100).toFixed(2)} ‚ÇΩ/–º–µ—Å—è—Ü\n`;
      message += `‚Ä¢ –ì–æ–¥–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞: ${(SUBSCRIPTION_PRICES.pro.year / 100).toFixed(2)} ‚ÇΩ/–≥–æ–¥ (—ç–∫–æ–Ω–æ–º–∏—è 15%)\n\n`;
      
      // –ë–∞–ª–∞–Ω—Å
      const currentBalance = user.balance || 0;
      message += `<b>üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å:</b> ${(currentBalance / 100).toFixed(2)} ‚ÇΩ\n\n`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const keyboard: TelegramBot.InlineKeyboardButton[][] = [];
      
      // –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
      if (user.subscriptionType === 'free' || (user.subscriptionExpiresAt && user.subscriptionExpiresAt < new Date())) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        if (currentBalance >= SUBSCRIPTION_PRICES.pro.month) {
          keyboard.push([
            this.createButton('–û—Ñ–æ—Ä–º–∏—Ç—å Pro –Ω–∞ –º–µ—Å—è—Ü', ActionNamespace.SUB, 'month')
          ]);
        }
        
        if (currentBalance >= SUBSCRIPTION_PRICES.pro.year) {
          keyboard.push([
            this.createButton('–û—Ñ–æ—Ä–º–∏—Ç—å Pro –Ω–∞ –≥–æ–¥ (–≤—ã–≥–æ–¥–Ω–µ–µ!)', ActionNamespace.SUB, 'year')
          ]);
        }
        
        if (currentBalance < SUBSCRIPTION_PRICES.pro.month) {
          keyboard.push([
            this.createButton('–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', ActionNamespace.SUB, 'topup')
          ]);
        }
      } 
      // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å Pro –ø–æ–¥–ø–∏—Å–∫–∞
      else if (user.subscriptionType === 'pro') {
        if (user.subscriptionExpiresAt) {
          keyboard.push([
            this.createButton('–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', ActionNamespace.SUB, 'extend')
          ]);
        }
      }
      
      // –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
      keyboard.push([
        this.createButton('¬´ –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', ActionNamespace.MENU, MenuType.MAIN)
      ]);
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
      const newMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–∏–ø –º–µ–Ω—é
      state.lastMenuMessageId = newMessage.message_id;
      state.activeMenu = MenuType.SUBSCRIPTION;
      
    } catch (error) {
      console.error('Error sending subscription menu:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞
  private async sendRegistrationInstructions(chatId: number) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (state.lastMenuMessageId) {
      try {
        await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
      } catch (e) {
        console.log('Could not delete previous menu message', e);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    const welcomeMessage = `
üöÄ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ikarus!</b>

Ikarus - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –≤–∏–¥–µ–æ–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.
    `;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –≤—Ö–æ–¥–∞
    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [
        { text: 'üîë –í–æ–π—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º', callback_data: 'auth:login:start' }
      ],
      [
        { text: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ', url: 'https://ikarus.app/register' }
      ],
      [
        { text: '‚ùì –ü–æ–º–æ—â—å', callback_data: 'auth:help' }
      ]
    ];
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
    const message = await this.bot.sendMessage(chatId, welcomeMessage, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: keyboard
      }
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    state.lastMenuMessageId = message.message_id;
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –¥–ª—è –≤–≤–æ–¥–∞ –ª–æ–≥–∏–Ω–∞
  private async sendUsernamePrompt(chatId: number) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (state.lastMenuMessageId) {
      try {
        await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
      } catch (e) {
        console.log('Could not delete previous menu message', e);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    const message = await this.bot.sendMessage(chatId, 
      'üë§ <b>–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:',
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[
            { text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'auth:cancel' }
          ]]
        }
      }
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    state.lastMenuMessageId = message.message_id;
    state.authState = {
      stage: 'username',
      timestamp: Date.now()
    };
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –¥–ª—è –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
  private async sendPasswordPrompt(chatId: number, username: string) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (state.lastMenuMessageId) {
      try {
        await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
      } catch (e) {
        console.log('Could not delete previous menu message', e);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    const message = await this.bot.sendMessage(chatId, 
      `üë§ <b>–í—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç</b>\n\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>${username}</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:`,
      {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: [[
            { text: '¬´ –û—Ç–º–µ–Ω–∞', callback_data: 'auth:cancel' }
          ]]
        }
      }
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ ID —Å–æ–æ–±—â–µ–Ω–∏—è
    state.lastMenuMessageId = message.message_id;
    state.authState = {
      stage: 'password',
      username,
      timestamp: Date.now()
    };
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  private async sendAuthHelp(chatId: number) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if (state.lastMenuMessageId) {
      try {
        await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
      } catch (e) {
        console.log('Could not delete previous menu message', e);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    const helpMessage = `
<b>‚ùì –ü–æ–º–æ—â—å —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π</b>

<b>–ö–∞–∫ –≤–æ–π—Ç–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º"
2. –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω)
3. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å

<b>–ö–∞–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è:</b>
1. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ"
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ
3. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ Telegram –±–æ—Ç –∏ –≤–æ–π–¥–∏—Ç–µ —Å —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

<b>–ü—Ä–æ–±–ª–µ–º—ã —Å –≤—Ö–æ–¥–æ–º?</b>
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—è
‚Ä¢ –ï—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –Ω–∞ —Å–∞–π—Ç–µ
‚Ä¢ –ü–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É
    `;
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é
    const message = await this.bot.sendMessage(chatId, helpMessage, {
      parse_mode: 'HTML',
      reply_markup: {
        inline_keyboard: [[
          { text: '¬´ –ù–∞–∑–∞–¥', callback_data: 'auth:back' }
        ]]
      }
    });
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    state.lastMenuMessageId = message.message_id;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
  private async sendHelpMessage(chatId: number) {
    if (!this.bot) return;
    
    await this.bot.sendMessage(chatId, 
      'üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n' +
      '/start - –Ω–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n' +
      '/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n' +
      '/register –∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–∞—Ä–æ–ª—å - –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∞–∫–∫–∞—É–Ω—Ç\n' +
      '/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏\n' +
      '/subscribe –ø–ª–∞–Ω - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É (–¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã: pro-month, pro-year)\n' +
      '/conferences - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π\n' +
      '/create –Ω–∞–∑–≤–∞–Ω–∏–µ - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é\n' +
      '/join id - –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø–æ ID\n\n' +
      'üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ Pro-–ø–æ–¥–ø–∏—Å–∫–∏:\n' +
      '‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π (–≤–º–µ—Å—Ç–æ 15 –º–∏–Ω—É—Ç)\n' +
      '‚úÖ –î–æ 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ (–≤–º–µ—Å—Ç–æ 5)\n' +
      '‚úÖ –ó–∞–ø–∏—Å—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π\n' +
      '‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞\n' +
      '‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –¥–æ—Å–∫–∞\n' +
      '‚úÖ –û–ø—Ä–æ—Å—ã –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è\n\n' +
      'üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å:\n' +
      'Pro-month: 799 ‚ÇΩ/–º–µ—Å—è—Ü\n' +
      'Pro-year: 7999 ‚ÇΩ/–≥–æ–¥ (—ç–∫–æ–Ω–æ–º–∏—è 15%)'
    );
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
  private async sendAdminHelpMessage(chatId: number) {
    if (!this.bot) return;
    
    await this.bot.sendMessage(chatId, 
      'üîç *–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n' +
      '/user list - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n' +
      '/user info username - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n' +
      '/user ban username –ø—Ä–∏—á–∏–Ω–∞ - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
      '/user unban username - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n' +
      '/user upgrade username —Ç–∏–ø - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n' +
      '*–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å:*\n' +
      '–î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://ikarus.app/admin\n' +
      '–¢–∞–º –≤—ã –Ω–∞–π–¥–µ—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –ø–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π.\n\n' +
      '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ã—á–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help',
      { parse_mode: 'Markdown' }
    );
  }

  // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async registerUser(chatId: number, telegramId: string, username: string, password: string) {
    if (!this.bot) return;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const existingUser = await storage.getUserByUsername(username);
      
      if (!existingUser) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
      const isPasswordValid = await this.comparePasswords(password, existingUser.password);
      
      if (!isPasswordValid) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.'
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–≤—è–∑–∞–Ω –ª–∏ —É–∂–µ Telegram –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É
      if (existingUser.telegramId && existingUser.telegramId !== telegramId) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –≠—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.'
        );
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø—Ä–∏–≤—è–∑—ã–≤–∞—è Telegram ID
      await storage.updateUser(existingUser.id, { 
        telegramId,
        lastLoginAt: new Date()
      });
      
      await this.bot.sendMessage(chatId, 
        `‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –≤–∞—à–µ–º—É Telegram!\n\n` +
        `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${existingUser.name || existingUser.username}.\n\n` +
        `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏.`
      );
      
    } catch (error) {
      console.error('Error registering user:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
      );
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async sendUserStatus(chatId: number, telegramId: string) {
    if (!this.bot) return;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
      const user = await storage.getUserByTelegramId(telegramId);
      
      if (!user) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.'
        );
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const conferences = await storage.getConferencesByUserId(user.id);
      const activeConferences = conferences.filter(conf => conf.active);
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
      const currentBalance = user.balance || 0;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
      let statusMessage = `üë§ **–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n`;
      statusMessage += `–ò–º—è: ${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      statusMessage += `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username}\n`;
      statusMessage += `Email: ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
      statusMessage += `–†–æ–ª—å: ${this.translateRole(user.role)}\n`;
      statusMessage += `–ë–∞–ª–∞–Ω—Å: ${(currentBalance / 100).toFixed(2)} ‚ÇΩ\n\n`;
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
      statusMessage += `üìä **–ü–æ–¥–ø–∏—Å–∫–∞**\n\n`;
      statusMessage += `–¢–∏–ø: ${user.subscriptionType === 'pro' ? 'üåü Pro' : 'üåô Free'}\n`;
      
      if (user.subscriptionExpiresAt) {
        const daysLeft = Math.ceil((user.subscriptionExpiresAt.getTime() - Date.now()) / (1000 * 60 * 60 * 24));
        statusMessage += `–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${user.subscriptionExpiresAt.toLocaleDateString()}\n`;
        statusMessage += `–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: ${daysLeft > 0 ? daysLeft : '–ò—Å—Ç–µ–∫–ª–∞'}\n\n`;
      } else if (user.subscriptionType === 'pro') {
        statusMessage += `–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: –ë–µ—Å—Å—Ä–æ—á–Ω–æ\n\n`;
      } else {
        statusMessage += `\n`;
      }
      
      // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö
      statusMessage += `üóì **–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏**\n\n`;
      statusMessage += `–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π: ${activeConferences.length}\n`;
      statusMessage += `–í—Å–µ–≥–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π: ${conferences.length}\n\n`;
      
      if (user.subscriptionType === 'free') {
        statusMessage += `‚≠êÔ∏è –û—Ñ–æ—Ä–º–∏—Ç–µ Pro –ø–æ–¥–ø–∏—Å–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º!\n`;
        statusMessage += `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /subscribe pro-month –∏–ª–∏ /subscribe pro-year`;
      }
      
      await this.bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
      
    } catch (error) {
      console.error('Error sending user status:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω
  private async subscribeUser(chatId: number, telegramId: string, plan: string) {
    if (!this.bot) return;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
      const user = await storage.getUserByTelegramId(telegramId);
      
      if (!user) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.'
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (user.isBanned) {
        await this.bot.sendMessage(chatId, 
          `‚õîÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: ${user.banReason || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–∏—Å–∞'}`
        );
        return;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å
      let amount: number;
      let duration: number;
      
      if (plan === 'pro-month') {
        amount = SUBSCRIPTION_PRICES.pro.month;
        duration = SUBSCRIPTION_DURATIONS.month;
      } else if (plan === 'pro-year') {
        amount = SUBSCRIPTION_PRICES.pro.year;
        duration = SUBSCRIPTION_DURATIONS.year;
      } else {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã: pro-month, pro-year'
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const currentBalance = user.balance || 0;
      if (currentBalance < amount) {
        const missingAmount = amount - currentBalance;
        await this.bot.sendMessage(chatId, 
          `‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.\n\n` +
          `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${(currentBalance / 100).toFixed(2)} ‚ÇΩ\n` +
          `–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: ${(amount / 100).toFixed(2)} ‚ÇΩ\n` +
          `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: ${(missingAmount / 100).toFixed(2)} ‚ÇΩ\n\n` +
          `–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ.`
        );
        return;
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
      const expiresAt = new Date(Date.now() + duration);
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–¥–ø–∏—Å–∫–µ
      const subscriptionId = await storage.createSubscription({
        userId: user.id,
        type: 'pro',
        expiresAt,
        amount
      });
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await storage.updateUser(user.id, {
        subscriptionType: 'pro',
        subscriptionExpiresAt: expiresAt,
        balance: currentBalance - amount
      });
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–ø–ª–∞—Ç–µ
      await storage.createPayment({
        userId: user.id,
        amount,
        status: 'completed',
        paymentMethod: 'balance',
        subscriptionId
      });
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞
      await storage.createBalanceHistory({
        userId: user.id,
        amount: -amount,
        type: 'subscription',
        description: `–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ${plan}`
      });
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
      await this.bot.sendMessage(chatId, 
        `‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ Pro —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!\n\n` +
        `–¢–∏–ø: ${plan === 'pro-month' ? '–ú–µ—Å—è—á–Ω–∞—è' : '–ì–æ–¥–æ–≤–∞—è'}\n` +
        `–°—Ç–æ–∏–º–æ—Å—Ç—å: ${(amount / 100).toFixed(2)} ‚ÇΩ\n` +
        `–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: ${expiresAt.toLocaleDateString()}\n\n` +
        `–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Pro-–∞–∫–∫–∞—É–Ω—Ç–∞!\n` +
        `‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π\n` +
        `‚Ä¢ –î–æ 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n` +
        `‚Ä¢ –ó–∞–ø–∏—Å—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π\n` +
        `‚Ä¢ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞\n` +
        `‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –¥–æ—Å–∫–∞\n` +
        `‚Ä¢ –û–ø—Ä–æ—Å—ã –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è`
      );
      
    } catch (error) {
      console.error('Error subscribing user:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.'
      );
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞
  private async handleAdminAuth(chatId: number, telegramId: string, password: string) {
    if (!this.bot || !this.settings) return;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º –ø–æ Telegram ID
      const isSuperAdmin = this.settings.superAdminId === telegramId;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
      const isPasswordValid = this.settings.adminPassword && 
        await this.comparePasswords(password, this.settings.adminPassword);
      
      if (!isPasswordValid && !isSuperAdmin) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
        );
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      let user = await storage.getUserByTelegramId(telegramId);
      
      if (user) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –∞–¥–º–∏–Ω
        if (user.role !== 'admin' && user.role !== 'superadmin') {
          await storage.updateUser(user.id, { 
            role: isSuperAdmin ? 'superadmin' : 'admin'
          });
          
          user = await storage.getUserByTelegramId(telegramId);
        }
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é –∞–¥–º–∏–Ω–∞
        const username = `admin_${Date.now()}`;
        const hashedPassword = await this.hashPassword(password);
        
        const newUser = await storage.createUser({
          username,
          password: hashedPassword,
          name: isSuperAdmin ? 'Super Administrator' : 'Administrator',
          role: isSuperAdmin ? 'superadmin' : 'admin',
          subscriptionType: 'pro',
          telegramId
        });
        
        user = newUser;
      }
      
      await this.bot.sendMessage(chatId, 
        `‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ ${isSuperAdmin ? '—Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'}!\n\n` +
        `–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n` +
        `/user list - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n` +
        `/user info username - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n` +
        `/user ban username –ø—Ä–∏—á–∏–Ω–∞ - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
        `/user unban username - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n` +
        `/user upgrade username —Ç–∏–ø - –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`
      );
      
    } catch (error) {
      console.error('Error handling admin auth:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  // –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  private async listUsers(chatId: number) {
    if (!this.bot) return;
    
    try {
      const allUsers = await storage.getAllUsers();
      
      if (allUsers.length === 0) {
        await this.bot.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
        return;
      }
      
      const usersList = allUsers.map((user, index) => {
        return `${index + 1}. ${user.username} (${this.translateRole(user.role)}) - ${user.subscriptionType === 'pro' ? 'üåü Pro' : 'üåô Free'}${user.isBanned ? ' ‚õîÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : ''}`;
      }).join('\n');
      
      const totalMessage = `üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUsers.length}\n\n${usersList}`;
      
      // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
      if (totalMessage.length > 4000) {
        const chunks = this.splitMessage(totalMessage, 3900);
        for (const chunk of chunks) {
          await this.bot.sendMessage(chatId, chunk);
        }
      } else {
        await this.bot.sendMessage(chatId, totalMessage);
      }
      
    } catch (error) {
      console.error('Error listing users:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.'
      );
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
  private async getUserInfo(chatId: number, username: string) {
    if (!this.bot) return;
    
    try {
      const user = await storage.getUserByUsername(username);
      
      if (!user) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.'
        );
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const conferences = await storage.getConferencesByUserId(user.id);
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
      const currentBalance = user.balance || 0;
      
      let message = `üë§ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ**\n\n`;
      message += `ID: ${user.id}\n`;
      message += `–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}\n`;
      message += `–ò–º—è: ${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      message += `Email: ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n`;
      message += `–†–æ–ª—å: ${this.translateRole(user.role)}\n`;
      message += `–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: ${user.subscriptionType === 'pro' ? 'üåü Pro' : 'üåô Free'}\n`;
      
      if (user.subscriptionExpiresAt) {
        message += `–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ: ${user.subscriptionExpiresAt.toLocaleDateString()}\n`;
      }
      
      message += `Telegram ID: ${user.telegramId || '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}\n`;
      message += `–ë–∞–ª–∞–Ω—Å: ${(currentBalance / 100).toFixed(2)} ‚ÇΩ\n`;
      message += `–°—Ç–∞—Ç—É—Å: ${user.isBanned ? '‚õîÔ∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω'}\n`;
      
      if (user.isBanned && user.banReason) {
        message += `–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: ${user.banReason}\n`;
      }
      
      message += `–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${user.createdAt.toLocaleDateString()}\n`;
      message += `–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: ${user.lastLoginAt ? user.lastLoginAt.toLocaleDateString() : '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\n`;
      
      message += `üóì **–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏**\n\n`;
      message += `–í—Å–µ–≥–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π: ${conferences.length}\n`;
      message += `–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π: ${conferences.filter(c => c.active).length}\n`;
      
      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      
    } catch (error) {
      console.error('Error getting user info:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.'
      );
    }
  }

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async banUser(chatId: number, username: string, reason: string) {
    if (!this.bot) return;
    
    try {
      const user = await storage.getUserByUsername(username);
      
      if (!user) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.'
        );
        return;
      }
      
      // –ù–µ–ª—å–∑—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞
      if (user.role === 'superadmin') {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
        );
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await storage.updateUser(user.id, {
        isBanned: true,
        banReason: reason
      });
      
      await this.bot.sendMessage(chatId, 
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n` +
        `–ü—Ä–∏—á–∏–Ω–∞: ${reason}`
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –ø—Ä–∏–≤—è–∑–∞–Ω Telegram
      if (user.telegramId) {
        try {
          await this.bot.sendMessage(parseInt(user.telegramId), 
            `‚õîÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n` +
            `–ü—Ä–∏—á–∏–Ω–∞: ${reason}\n\n` +
            `–î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.`
          );
        } catch (e) {
          console.error('Error sending ban notification to user:', e);
        }
      }
      
    } catch (error) {
      console.error('Error banning user:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
      );
    }
  }

  // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async unbanUser(chatId: number, username: string) {
    if (!this.bot) return;
    
    try {
      const user = await storage.getUserByUsername(username);
      
      if (!user) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.'
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
      if (!user.isBanned) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.'
        );
        return;
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await storage.updateUser(user.id, {
        isBanned: false,
        banReason: null
      });
      
      await this.bot.sendMessage(chatId, 
        `‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –ø—Ä–∏–≤—è–∑–∞–Ω Telegram
      if (user.telegramId) {
        try {
          await this.bot.sendMessage(parseInt(user.telegramId), 
            `‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n` +
            `–¢–µ–ø–µ—Ä—å –≤—ã —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ —Å–µ—Ä–≤–∏—Å–∞.`
          );
        } catch (e) {
          console.error('Error sending unban notification to user:', e);
        }
      }
      
    } catch (error) {
      console.error('Error unbanning user:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
      );
    }
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async upgradeUserSubscription(chatId: number, username: string, subscriptionType: string) {
    if (!this.bot) return;
    
    try {
      const user = await storage.getUserByUsername(username);
      
      if (!user) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.'
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
      if (subscriptionType !== 'free' && subscriptionType !== 'pro') {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏. –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã: free, pro'
        );
        return;
      }
      
      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ (–¥–ª—è Pro - 1 –≥–æ–¥ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã)
      const expiresAt = subscriptionType === 'pro' ? 
        new Date(Date.now() + SUBSCRIPTION_DURATIONS.year) : null;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await storage.updateUser(user.id, {
        subscriptionType: subscriptionType as any,
        subscriptionExpiresAt: expiresAt
      });
      
      await this.bot.sendMessage(chatId, 
        `‚úÖ –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.username} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${subscriptionType === 'pro' ? 'üåü Pro' : 'üåô Free'}.` +
        (expiresAt ? `\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ ${expiresAt.toLocaleDateString()}` : '')
      );
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –ø—Ä–∏–≤—è–∑–∞–Ω Telegram
      if (user.telegramId) {
        try {
          if (subscriptionType === 'pro') {
            await this.bot.sendMessage(parseInt(user.telegramId), 
              `üåü –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ Pro.\n` +
              `–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –¥–æ ${expiresAt?.toLocaleDateString()}\n\n` +
              `–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Pro-–∞–∫–∫–∞—É–Ω—Ç–∞!\n` +
              `‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π\n` +
              `‚Ä¢ –î–æ 100 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n` +
              `‚Ä¢ –ó–∞–ø–∏—Å—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π\n` +
              `‚Ä¢ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞\n` +
              `‚Ä¢ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –¥–æ—Å–∫–∞\n` +
              `‚Ä¢ –û–ø—Ä–æ—Å—ã –∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è`
            );
          } else {
            await this.bot.sendMessage(parseInt(user.telegramId), 
              `üåô –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ –±–∞–∑–æ–≤—É—é (Free).\n` +
              `–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –¥–µ–π—Å—Ç–≤—É—é—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:\n` +
              `‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –¥–æ 15 –º–∏–Ω—É—Ç\n` +
              `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 5 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n` +
              `‚Ä¢ –ë–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n\n` +
              `–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ Pro-–ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /subscribe`
            );
          }
        } catch (e) {
          console.error('Error sending subscription update notification to user:', e);
        }
      }
      
    } catch (error) {
      console.error('Error upgrading user subscription:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
      );
    }
  }
  
  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private async sendUserConferences(chatId: number, telegramId: string) {
    if (!this.bot) return;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
      const user = await storage.getUserByTelegramId(telegramId);
      
      if (!user) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.'
        );
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const conferences = await storage.getConferencesByUserId(user.id);
      
      if (!conferences || conferences.length === 0) {
        await this.bot.sendMessage(chatId, 
          '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π.\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.'
        );
        return;
      }
      
      // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
      const activeConferences = conferences.filter(conf => conf.active);
      const endedConferences = conferences.filter(conf => !conf.active);
      
      // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
      let message = `üóì **–í–∞—à–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏**\n\n`;
      
      if (activeConferences.length > 0) {
        message += `**–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:**\n\n`;
        activeConferences.forEach((conf, index) => {
          const startedAt = conf.startedAt || conf.createdAt;
          const duration = conf.duration ? `${Math.floor(conf.duration / 60)} –º–∏–Ω` : '–í –ø—Ä–æ—Ü–µ—Å—Å–µ';
          
          message += `${index + 1}. *${conf.name}*\n`;
          message += `   ID: \`${conf.id}\`\n`;
          message += `   –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${conf.currentParticipants || 0}/${conf.maxParticipants || 5}\n`;
          message += `   –ù–∞—á–∞–ª–æ: ${startedAt.toLocaleString()}\n`;
          message += `   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}\n\n`;
        });
      }
      
      if (endedConferences.length > 0) {
        message += `**–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:**\n\n`;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π
        const recentEnded = endedConferences.sort((a, b) => 
          (b.endedAt?.getTime() || 0) - (a.endedAt?.getTime() || 0)
        ).slice(0, 5);
        
        recentEnded.forEach((conf, index) => {
          const startedAt = conf.startedAt || conf.createdAt;
          const endedAt = conf.endedAt || new Date();
          const duration = conf.duration ? 
            `${Math.floor(conf.duration / 60)} –º–∏–Ω` : 
            `${Math.floor((endedAt.getTime() - startedAt.getTime()) / (1000 * 60))} –º–∏–Ω`;
          
          message += `${index + 1}. *${conf.name}*\n`;
          message += `   ID: \`${conf.id}\`\n`;
          message += `   –ù–∞—á–∞–ª–æ: ${startedAt.toLocaleString()}\n`;
          message += `   –û–∫–æ–Ω—á–∞–Ω–∏–µ: ${endedAt.toLocaleString()}\n`;
          message += `   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration}\n`;
          if (conf.recordingUrl) {
            message += `   –ó–∞–ø–∏—Å—å: ${conf.recordingUrl}\n`;
          }
          message += `\n`;
        });
        
        if (endedConferences.length > 5) {
          message += `...–∏ –µ—â–µ ${endedConferences.length - 5} –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π\n\n`;
        }
      }
      
      message += `–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`;
      message += `/create –Ω–∞–∑–≤–∞–Ω–∏–µ_–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏\n\n`;
      message += `–î–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n`;
      message += `/join ID_–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏`;
      
      await this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' });
      
    } catch (error) {
      console.error('Error sending user conferences:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }
  
  // ==================== –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ
   * @param message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç HTML —Ä–∞–∑–º–µ—Ç–∫—É)
   * @param options –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
   * @returns –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendNotification(userId: number, message: string, options?: {
    parseMode?: 'HTML' | 'Markdown',
    keyboard?: Array<Array<{ text: string, callback_data?: string, url?: string }>>,
    silent?: boolean
  }): Promise<boolean> {
    if (!this.bot || !this.isInitialized) return false;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await storage.getUser(userId);
      
      if (!user || !user.telegramId) {
        console.log(`[TelegramBot] Cannot send notification: User ${userId} not found or has no telegramId`);
        return false;
      }
      
      // –û–ø—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageOptions: TelegramBot.SendMessageOptions = {
        parse_mode: options?.parseMode || 'HTML',
        disable_notification: options?.silent
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞
      if (options?.keyboard) {
        messageOptions.reply_markup = {
          inline_keyboard: options.keyboard
        };
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      await this.bot.sendMessage(parseInt(user.telegramId), message, messageOptions);
      return true;
    } catch (error) {
      console.error('[TelegramBot] Error sending notification:', error);
      return false;
    }
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param conferenceId ID –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
   * @param conferenceName –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
   * @param creatorName –ò–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
   * @returns –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendConferenceInvitation(userId: number, conferenceId: string, conferenceName: string, creatorName: string): Promise<boolean> {
    const message = `<b>üéØ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é</b>\n\n` +
      `–í—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –Ω–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é <b>${conferenceName}</b>\n` +
      `–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: <b>${creatorName}</b>\n\n` +
      `–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;
    
    const keyboard = [
      [{ text: 'üöÄ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', callback_data: `${ActionNamespace.CONF}:join:${conferenceId}` }],
      [{ text: 'üì± –û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏', url: `https://yancuic-tlanextia.replit.app/conferences/${conferenceId}` }]
    ];
    
    return this.sendNotification(userId, message, {
      parseMode: 'HTML',
      keyboard
    });
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param title –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param body –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @param type –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   * @returns –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendSystemNotification(userId: number, title: string, body: string, type: 'info' | 'success' | 'warning' | 'error'): Promise<boolean> {
    let icon = 'üì¢'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    switch (type) {
      case 'success':
        icon = '‚úÖ';
        break;
      case 'warning':
        icon = '‚ö†Ô∏è';
        break;
      case 'error':
        icon = '‚ùå';
        break;
      case 'info':
      default:
        icon = '‚ÑπÔ∏è';
        break;
    }
    
    const message = `<b>${icon} ${title}</b>\n\n${body}`;
    
    return this.sendNotification(userId, message, {
      parseMode: 'HTML'
    });
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–∞
   * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param paymentId ID –ø–ª–∞—Ç–µ–∂–∞
   * @param status –°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
   * @param amount –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
   * @param plan –¢–∏–ø –ø–ª–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏
   * @returns –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendPaymentNotification(userId: number, paymentId: string, status: 'completed' | 'failed' | 'pending' | 'cancelled', 
    amount: number, plan: string): Promise<boolean> {
    let statusIcon = '‚è≥';
    let statusText = '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
    
    switch (status) {
      case 'completed':
        statusIcon = '‚úÖ';
        statusText = '–û–ø–ª–∞—á–µ–Ω';
        break;
      case 'failed':
        statusIcon = '‚ùå';
        statusText = '–ù–µ —É–¥–∞–ª–æ—Å—å';
        break;
      case 'cancelled':
        statusIcon = 'üö´';
        statusText = '–û—Ç–º–µ–Ω–µ–Ω';
        break;
      case 'pending':
      default:
        statusIcon = '‚è≥';
        statusText = '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã';
        break;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—É–º–º—É –≤ —Ä—É–±–ª–∏
    const amountRub = (amount / 100).toFixed(2);
    
    const message = `<b>üí≥ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ</b>\n\n` +
      `–°—Ç–∞—Ç—É—Å: ${statusIcon} <b>${statusText}</b>\n` +
      `–°—É–º–º–∞: <b>${amountRub} ‚ÇΩ</b>\n` +
      `–ü–ª–∞–Ω: <b>${plan}</b>\n` +
      `ID –ø–ª–∞—Ç–µ–∂–∞: <code>${paymentId}</code>`;
    
    let keyboard = [];
    
    if (status === 'pending') {
      keyboard = [
        [{ text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å', url: `https://yancuic-tlanextia.replit.app/payments/${paymentId}` }]
      ];
    } else if (status === 'completed') {
      keyboard = [
        [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: `${ActionNamespace.MENU}:${MenuType.PROFILE}` }]
      ];
    }
    
    return this.sendNotification(userId, message, {
      parseMode: 'HTML',
      keyboard: keyboard.length > 0 ? keyboard : undefined
    });
  }
  
  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å Telegram ID
   * @param message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param options –û–ø—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   * @returns –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  async sendBroadcastMessage(message: string, options?: {
    onlyAdmins?: boolean,
    parseMode?: 'HTML' | 'Markdown',
    silent?: boolean
  }): Promise<number> {
    if (!this.bot || !this.isInitialized) return 0;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å Telegram ID
      let usersQuery = db.select()
        .from(users)
        .where(sql`${users.telegramId} IS NOT NULL`);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      if (options?.onlyAdmins) {
        usersQuery = usersQuery.where(sql`${users.role} IN ('admin', 'superadmin')`);
      }
      
      const usersWithTelegram = await usersQuery;
      
      let successCount = 0;
      
      // –û–ø—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
      const messageOptions: TelegramBot.SendMessageOptions = {
        parse_mode: options?.parseMode || 'HTML',
        disable_notification: options?.silent
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      for (const user of usersWithTelegram) {
        try {
          if (user.telegramId) {
            await this.bot.sendMessage(parseInt(user.telegramId), message, messageOptions);
            successCount++;
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram API
            await new Promise(resolve => setTimeout(resolve, 50));
          }
        } catch (error) {
          console.error(`[TelegramBot] Error sending broadcast to user ${user.id}:`, error);
        }
      }
      
      return successCount;
    } catch (error) {
      console.error('[TelegramBot] Error sending broadcast:', error);
      return 0;
    }
  }

  // ==================== –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ====================
  
  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
  private async joinConference(chatId: number, telegramId: string, conferenceId: string) {
    if (!this.bot) return;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
      const user = await storage.getUserByTelegramId(telegramId);
      
      if (!user) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.'
        );
        return;
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
      const conference = await storage.getConference(conferenceId);
      
      if (!conference) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å ID –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.'
        );
        return;
      }
      
      if (!conference.active) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –≠—Ç–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.'
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
      const maxParticipants = conference.maxParticipants || 5;
      if ((conference.currentParticipants || 0) >= maxParticipants) {
        await this.bot.sendMessage(chatId, 
          `‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ (${maxParticipants}).`
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
      if (user.subscriptionType === 'free' && conference.creatorId !== user.id) {
        const confStartTime = conference.startedAt || conference.createdAt;
        const now = new Date();
        const durationMin = Math.floor((now.getTime() - confStartTime.getTime()) / (60 * 1000));
        
        if (durationMin >= 15) {
          await this.bot.sendMessage(chatId, 
            '‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞ 15 –º–∏–Ω—É—Ç–∞–º–∏.\n\n' +
            '–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É Pro, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —ç—Ç–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.'
          );
          return;
        }
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const baseUrl = 'https://ikarus.app/conference';
      const joinUrl = `${baseUrl}/${conferenceId}?name=${encodeURIComponent(user.name || user.username)}`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Å—ã–ª–∫–æ–π
      await this.bot.sendMessage(chatId, 
        `‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ "${conference.name}".\n\n` +
        `[–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è](${joinUrl})\n\n` +
        `ID: ${conferenceId}\n` +
        `–£—á–∞—Å—Ç–Ω–∏–∫–∏: ${conference.currentParticipants || 0}/${maxParticipants}\n` +
        `–°–æ–∑–¥–∞–Ω–∞: ${conference.createdAt.toLocaleString()}\n\n` +
        `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ ID –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç Ikarus.`,
        { parse_mode: 'Markdown' }
      );
      
    } catch (error) {
      console.error('Error joining conference:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
  private async createConference(chatId: number, telegramId: string, conferenceName: string) {
    if (!this.bot) return;
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
      const user = await storage.getUserByTelegramId(telegramId);
      
      if (!user) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –í–∞—à Telegram –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.'
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      if (user.isBanned) {
        await this.bot.sendMessage(chatId, 
          `‚õîÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü—Ä–∏—á–∏–Ω–∞: ${user.banReason || '–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–µ—Ä–≤–∏—Å–∞'}`
        );
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
      if (!conferenceName || conferenceName.length < 3) {
        await this.bot.sendMessage(chatId, 
          '‚ö†Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤.'
        );
        return;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É –ø–æ–¥–ø–∏—Å–∫–∏
      let maxParticipants = 5; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
      let hasScreenShare = false;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (user.subscriptionType === 'pro') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ PRO –ø–æ–¥–ø–∏—Å–∫–∞
        if (user.subscriptionExpiresAt) {
          const now = new Date();
          if (new Date(user.subscriptionExpiresAt) < now) {
            // –ü–æ–Ω–∏–∂–∞–µ–º –¥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞
            await storage.updateUser(user.id, {
              subscriptionType: 'free',
              subscriptionExpiresAt: null
            });
            await this.bot.sendMessage(chatId, 
              '‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ Pro –∏—Å—Ç–µ–∫–ª–∞. –í—ã –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–ª–∞–Ω —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏.'
            );
          } else {
            // PRO –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞
            maxParticipants = 50;
            hasScreenShare = true;
          }
        } else {
          // –£ –∞–∫—Ç–∏–≤–Ω—ã—Ö PRO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è
          maxParticipants = 50;
          hasScreenShare = true;
        }
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
      const conferenceId = `conf_${Date.now().toString(36)}_${Math.random().toString(36).substr(2, 5)}`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é
      const conference = await storage.createConference({
        name: conferenceName,
        description: `–°–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞ ${new Date().toLocaleString()}`,
        creatorId: user.id,
        maxParticipants,
        hasScreenShare,
        hasChat: true,
        hasVideoEnabled: true
      });
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      const baseUrl = 'https://ikarus.app/conference';
      const joinUrl = `${baseUrl}/${conference.id}?name=${encodeURIComponent(user.name || user.username)}`;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
      await this.bot.sendMessage(chatId, 
        `‚úÖ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${conference.name}\n` +
        `ID: \`${conference.id}\`\n` +
        `–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: ${user.subscriptionType === 'pro' ? 'üåü Pro' : 'üåô Free'}\n` +
        `–ú–∞–∫—Å–∏–º—É–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${maxParticipants}\n\n` +
        `[–ù–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è](${joinUrl})\n\n` +
        `–ß—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å ID –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:\n` +
        `\`${conference.id}\`\n\n` +
        `–û–Ω–∏ –º–æ–≥—É—Ç –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç –∫–æ–º–∞–Ω–¥–æ–π:\n` +
        `/join ${conference.id}`,
        { parse_mode: 'Markdown' }
      );
      
    } catch (error) {
      console.error('Error creating conference:', error);
      await this.bot.sendMessage(chatId, 
        '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      );
    }
  }

  // –ü–µ—Ä–µ–≤–æ–¥ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
  private translateRole(role: string): string {
    switch (role) {
      case 'user': return '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      case 'host': return '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä';
      case 'admin': return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
      case 'superadmin': return '–°—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
      default: return role;
    }
  }

  // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
  private splitMessage(text: string, maxLength = 4000): string[] {
    const result: string[] = [];
    let currentText = '';
    
    const lines = text.split('\n');
    
    for (const line of lines) {
      if (currentText.length + line.length + 1 <= maxLength) {
        currentText += (currentText ? '\n' : '') + line;
      } else {
        result.push(currentText);
        currentText = line;
      }
    }
    
    if (currentText) {
      result.push(currentText);
    }
    
    return result;
  }

  // –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  private async hashPassword(password: string): Promise<string> {
    const salt = randomBytes(16).toString("hex");
    const buf = (await scryptAsync(password, salt, 64)) as Buffer;
    return `${buf.toString("hex")}.${salt}`;
  }

  // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π
  private async comparePasswords(supplied: string, stored: string): Promise<boolean> {
    const [hashed, salt] = stored.split(".");
    const hashedBuf = Buffer.from(hashed, "hex");
    const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;
    return timingSafeEqual(hashedBuf, suppliedBuf);
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–Ω–µ–ª—å
  async showAdminPanel(chatId: number, user: User) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const userCount = await db.select({ count: sql`count(*)` }).from(users);
    const conferenceCount = await db.select({ count: sql`count(*)` }).from(conferences);
    const proUserCount = await db.select({ count: sql`count(*)` })
      .from(users)
      .where(eq(users.subscriptionType, 'pro'));
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const totalRevenue = await db.select({ 
      sum: sql`COALESCE(SUM(amount), 0)` 
    }).from(payments);
    
    const today = new Date();
    today.setHours(0, 0, 0, 0);
    
    const revenueToday = await db.select({ 
      sum: sql`COALESCE(SUM(amount), 0)` 
    }).from(payments)
      .where(gte(payments.createdAt, today));
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `
üî∑ <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Ikarus</b> üî∑

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount[0].count}
üëë Pro-–ø–æ–¥–ø–∏—Å–æ–∫: ${proUserCount[0].count} (${((Number(proUserCount[0].count) / Number(userCount[0].count)) * 100).toFixed(1)}%)
üé• –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π: ${conferenceCount[0].count}
üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${((Number(totalRevenue[0].sum) || 0) / 100).toFixed(0)} ‚ÇΩ
üìà –î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è: ${((Number(revenueToday[0].sum) || 0) / 100).toFixed(0)} ‚ÇΩ

–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª—ã –Ω–∏–∂–µ.
${user.role === 'superadmin' ? '\n‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.' : ''}
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è–º–∏
    const adminKeyboard: TelegramBot.InlineKeyboardButton[][] = [
      [
        { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin:users' },
        { text: 'üé• –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏', callback_data: 'admin:conferences' }
      ],
      [
        { text: 'üí∞ –ü–ª–∞—Ç–µ–∂–∏', callback_data: 'admin:payments' },
        { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin:settings' }
      ],
      [
        { text: 'üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞', callback_data: 'admin:system' },
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin:stats' }
      ],
      [
        { text: 'üîç –ü–æ–∏—Å–∫', callback_data: 'admin:search' },
        { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin:refresh' }
      ],
      [
        { text: '¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: `${ActionNamespace.MENU}:${MenuType.MAIN}` }
      ]
    ];

    try {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
      const sentMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: adminKeyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
      state.lastMenuMessageId = sentMessage.message_id;
      state.activeMenu = MenuType.ADMIN;
    } catch (error) {
      console.error('Error sending admin panel:', error);
      await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏');
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  async showAdminUsers(chatId: number, user: User) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const recentUsers = await db.select({
      id: users.id,
      username: users.username,
      email: users.email,
      subscriptionType: users.subscriptionType,
      createdAt: users.createdAt
    })
    .from(users)
    .orderBy(desc(users.createdAt))
    .limit(5);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n`;
    
    if (recentUsers.length > 0) {
      message += `<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n`;
      
      for (let i = 0; i < recentUsers.length; i++) {
        const u = recentUsers[i];
        const subIcon = u.subscriptionType === 'pro' ? 'üëë' : 'üåô';
        const date = new Date(u.createdAt).toLocaleDateString('ru-RU');
        
        message += `${i + 1}. ${subIcon} <b>${u.username}</b> - ${u.email}\n    –°–æ–∑–¥–∞–Ω: ${date}\n`;
      }
    } else {
      message += `<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</i>\n`;
    }
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [
        { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'admin:user_search' },
        { text: '‚ûï –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin:user_new' }
      ],
      [
        { text: 'üëë Pro-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin:user_pro' },
        { text: '‚ö†Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', callback_data: 'admin:user_banned' }
      ],
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin:user_stats' },
        { text: 'üë§ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏', callback_data: 'admin:user_roles' }
      ],
      [
        { text: '¬´ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin:back' }
      ]
    ];
    
    try {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const sentMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
      state.lastMenuMessageId = sentMessage.message_id;
    } catch (error) {
      console.error('Error sending admin users panel:', error);
      await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
    }
  }
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–±—ç–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  private async handleAdminCallbacks(callbackData: string, query: TelegramBot.CallbackQuery) {
    if (!this.bot || !query.message) return;
    
    const chatId = query.message.chat.id;
    const telegramId = query.from.id.toString();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await storage.getUserByTelegramId(telegramId);
    
    if (!user || (user.role !== 'admin' && user.role !== 'superadmin')) {
      await this.bot.answerCallbackQuery(query.id, {
        text: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞',
        show_alert: true
      });
      return;
    }
    
    // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫
    await this.bot.answerCallbackQuery(query.id);
    
    // –ü–∞—Ä—Å–∏–º –¥–µ–π—Å—Ç–≤–∏–µ
    const [prefix, action, param] = callbackData.split(':');
    
    if (prefix !== 'admin') return;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    switch(action) {
      case 'users':
        await this.showAdminUsers(chatId, user);
        break;
      case 'user_view':
        if (param) {
          await this.showUserDetails(chatId, user, parseInt(param, 10));
        } else {
          await this.showAdminUsers(chatId, user);
        }
        break;
      case 'user_edit':
        if (param) {
          await this.showUserEditForm(chatId, user, parseInt(param, 10));
        } else {
          await this.showAdminUsers(chatId, user);
        }
        break;
      case 'user_delete':
        if (param) {
          await this.showUserDeleteConfirmation(chatId, user, parseInt(param, 10));
        } else {
          await this.showAdminUsers(chatId, user);
        }
        break;
      case 'conferences':
        await this.showAdminConferences(chatId, user);
        break;
      case 'conf_view':
        if (param) {
          await this.showConferenceDetails(chatId, user, param);
        } else {
          await this.showAdminConferences(chatId, user);
        }
        break;
      case 'conf_end':
        if (param) {
          await this.endConferenceConfirmation(chatId, user, param);
        } else {
          await this.showAdminConferences(chatId, user);
        }
        break;
      case 'payments':
        await this.showAdminPayments(chatId, user);
        break;
      case 'payment_view':
        if (param) {
          await this.showPaymentDetails(chatId, user, parseInt(param, 10));
        } else {
          await this.showAdminPayments(chatId, user);
        }
        break;
      case 'stats':
        await this.showAdminStatistics(chatId, user);
        break;
      case 'settings':
        await this.showAdminSettings(chatId, user);
        break;
      case 'settings_save':
        await this.saveAdminSettings(chatId, user, param || '');
        break;
      case 'back':
      case 'refresh':
        await this.showAdminPanel(chatId, user);
        break;
      default:
        await this.bot.sendMessage(chatId, `‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ: ${action}`);
        break;
    }
  }
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö)
  getBot(): TelegramBot | null {
    return this.bot;
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
  async showAdminPanel(chatId: number, user: User) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const userCount = await db.select({ count: sql`count(*)` }).from(users);
    const conferenceCount = await db.select({ count: sql`count(*)` }).from(conferences);
    const proUserCount = await db.select({ count: sql`count(*)` }).from(users).where(eq(users.subscriptionType, 'pro'));
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = `
üî∑ <b>–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Ikarus</b> üî∑

üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>
üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userCount[0].count}
üëë Pro-–ø–æ–¥–ø–∏—Å–æ–∫: ${proUserCount[0].count} (${Number(userCount[0].count) > 0 ? ((Number(proUserCount[0].count) / Number(userCount[0].count)) * 100).toFixed(1) : 0}%)
üé• –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π: ${conferenceCount[0].count}

${user.role === 'superadmin' ? '\n‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏.' : ''}
`;
    
    // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è–º–∏
    const adminKeyboard: TelegramBot.InlineKeyboardButton[][] = [
      [
        { text: 'üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin:users' },
        { text: 'üé• –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏', callback_data: 'admin:conferences' }
      ],
      [
        { text: 'üí∞ –ü–ª–∞—Ç–µ–∂–∏', callback_data: 'admin:payments' },
        { text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin:settings' }
      ],
      [
        { text: 'üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞', callback_data: 'admin:system' },
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin:stats' }
      ],
      [
        { text: '¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: `${ActionNamespace.MENU}:${MenuType.MAIN}` }
      ]
    ];

    try {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é
      const sentMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: adminKeyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
      state.lastMenuMessageId = sentMessage.message_id;
      state.activeMenu = MenuType.ADMIN;
    } catch (error) {
      console.error('Error sending admin panel:', error);
      await this.bot?.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏');
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  async showAdminUsers(chatId: number, user: User) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const recentUsers = await db.select({
      id: users.id,
      username: users.username,
      email: users.email,
      subscriptionType: users.subscriptionType,
      createdAt: users.createdAt
    })
    .from(users)
    .orderBy(desc(users.createdAt))
    .limit(5);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n`;
    
    if (recentUsers.length > 0) {
      message += `<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n`;
      
      for (let i = 0; i < recentUsers.length; i++) {
        const u = recentUsers[i];
        const subIcon = u.subscriptionType === 'pro' ? 'üëë' : 'üåô';
        const date = new Date(u.createdAt).toLocaleDateString('ru-RU');
        
        message += `${i + 1}. ${subIcon} <b>${u.username}</b> - ${u.email}\n    –°–æ–∑–¥–∞–Ω: ${date}\n`;
      }
    } else {
      message += `<i>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</i>\n`;
    }
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [
        { text: 'üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: 'admin:user_search' },
        { text: '‚ûï –ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin:user_new' }
      ],
      [
        { text: 'üëë Pro-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', callback_data: 'admin:user_pro' },
        { text: '‚ö†Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ', callback_data: 'admin:user_banned' }
      ],
      [
        { text: '¬´ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin:back' }
      ]
    ];
    
    try {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const sentMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
      state.lastMenuMessageId = sentMessage.message_id;
    } catch (error) {
      console.error('Error sending admin users panel:', error);
      await this.bot?.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏');
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏
  async showAdminConferences(chatId: number, user: User) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
    const activeConferences = await db.select({
      id: conferences.id,
      name: conferences.name,
      hostId: conferences.hostId,
      participantCount: conferences.participantCount,
      startTime: conferences.startTime
    })
    .from(conferences)
    .where(eq(conferences.status, 'active'))
    .orderBy(desc(conferences.startTime))
    .limit(5);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üé• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏</b>\n\n`;
    
    if (activeConferences.length > 0) {
      message += `<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:</b>\n`;
      
      for (let i = 0; i < activeConferences.length; i++) {
        const conf = activeConferences[i];
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ—Å—Ç–µ
        const host = await db.select({ username: users.username })
          .from(users)
          .where(eq(users.id, conf.hostId))
          .limit(1);
        
        const hostName = host.length > 0 ? host[0].username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const startTime = new Date(conf.startTime).toLocaleString('ru-RU');
        
        message += `${i + 1}. <b>${conf.name}</b>\n    –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: ${hostName}\n    –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${conf.participantCount}\n    –ù–∞—á–∞–ª–æ: ${startTime}\n`;
      }
    } else {
      message += `<i>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π –Ω–µ—Ç</i>\n`;
    }
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏
    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [
        { text: 'üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏', callback_data: 'admin:conf_search' },
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'admin:conf_stats' }
      ],
      [
        { text: '‚è±Ô∏è –ü–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', callback_data: 'admin:conf_duration' },
        { text: 'üë• –ü–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º', callback_data: 'admin:conf_participants' }
      ],
      [
        { text: '¬´ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin:back' }
      ]
    ];
    
    try {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const sentMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
      state.lastMenuMessageId = sentMessage.message_id;
    } catch (error) {
      console.error('Error sending admin conferences panel:', error);
      await this.bot?.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è–º–∏');
    }
  }

  // –ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏
  async showAdminPayments(chatId: number, user: User) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏
    const recentPayments = await db.select({
      id: payments.id,
      userId: payments.userId,
      amount: payments.amount,
      status: payments.status,
      createdAt: payments.createdAt
    })
    .from(payments)
    .orderBy(desc(payments.createdAt))
    .limit(5);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞–º–∏</b>\n\n`;
    
    if (recentPayments.length > 0) {
      message += `<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n`;
      
      for (let i = 0; i < recentPayments.length; i++) {
        const payment = recentPayments[i];
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const userInfo = await db.select({ username: users.username })
          .from(users)
          .where(eq(users.id, payment.userId))
          .limit(1);
        
        const username = userInfo.length > 0 ? userInfo[0].username : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
        const amount = (payment.amount / 100).toFixed(0) + ' ‚ÇΩ';
        const date = new Date(payment.createdAt).toLocaleString('ru-RU');
        const status = payment.status === 'succeeded' ? '‚úÖ' : payment.status === 'pending' ? '‚è≥' : '‚ùå';
        
        message += `${i + 1}. ${status} <b>${amount}</b> - ${username}\n    –î–∞—Ç–∞: ${date}\n`;
      }
    } else {
      message += `<i>–ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</i>\n`;
    }
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏
    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [
        { text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π', callback_data: 'admin:payment_stats' },
        { text: 'üîç –ü–æ–∏—Å–∫ –ø–ª–∞—Ç–µ–∂–∞', callback_data: 'admin:payment_search' }
      ],
      [
        { text: 'üìÖ –ü–æ –º–µ—Å—è—Ü–∞–º', callback_data: 'admin:payment_monthly' },
        { text: 'üí≥ –ü–æ –º–µ—Ç–æ–¥–∞–º –æ–ø–ª–∞—Ç—ã', callback_data: 'admin:payment_methods' }
      ],
      [
        { text: '¬´ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin:back' }
      ]
    ];
    
    try {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const sentMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
      state.lastMenuMessageId = sentMessage.message_id;
    } catch (error) {
      console.error('Error sending admin payments panel:', error);
      await this.bot?.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞–º–∏');
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  async showAdminSettings(chatId: number, user: User) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    let message = `‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>\n\n`;
    
    message += `<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n`;
    message += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å Pro-–ø–æ–¥–ø–∏—Å–∫–∏: <b>799 ‚ÇΩ/–º–µ—Å</b>\n`;
    message += `‚è±Ô∏è –õ–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (Free): <b>15 –º–∏–Ω—É—Ç</b>\n`;
    message += `üë• –ú–∞–∫—Å. —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (Free): <b>5 —á–µ–ª–æ–≤–µ–∫</b>\n\n`;
    
    message += `<b>API –∫–ª—é—á–∏:</b>\n`;
    message += `üá∑üá∫ YooKassa: ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∞\n`;
    message += `üí≥ Stripe: ‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n`;
    
    // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    const keyboard: TelegramBot.InlineKeyboardButton[][] = [
      [
        { text: 'üí∞ –¶–µ–Ω—ã –∏ –ª–∏–º–∏—Ç—ã', callback_data: 'admin:settings_limits' },
        { text: 'üîë API –∫–ª—é—á–∏', callback_data: 'admin:settings_api' }
      ],
      [
        { text: 'üåê –î–æ–º–µ–Ω—ã –∏ URL', callback_data: 'admin:settings_domains' },
        { text: 'üîê –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', callback_data: 'admin:settings_security' }
      ],
      [
        { text: '¬´ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin:back' }
      ]
    ];
    
    try {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const sentMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
      state.lastMenuMessageId = sentMessage.message_id;
    } catch (error) {
      console.error('Error sending admin settings panel:', error);
      await this.bot?.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫');
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
  async showAdminSystem(chatId: number, user: User) {
    if (!this.bot) return;
    
    const state = this.getUserState(chatId);
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
      const os = require('os');
      
      const uptime = Math.floor(os.uptime() / 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö
      const uptimeFormatted = uptime >= 60 
        ? `${Math.floor(uptime / 60)} —á ${uptime % 60} –º–∏–Ω` 
        : `${uptime} –º–∏–Ω`;
        
      const freeMemoryMB = Math.floor(os.freemem() / 1024 / 1024);
      const totalMemoryMB = Math.floor(os.totalmem() / 1024 / 1024);
      const freeMemoryGB = (freeMemoryMB / 1024).toFixed(1);
      const totalMemoryGB = (totalMemoryMB / 1024).toFixed(1);
      
      const loadAvg = os.loadavg()[0].toFixed(2);
      const cpuUsage = (loadAvg * 100).toFixed(0) + '%';
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
      let dbStatus = '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      try {
        await db.execute(sql`SELECT 1`);
        dbStatus = '‚úÖ –û–Ω–ª–∞–π–Ω';
      } catch (err) {
        dbStatus = '‚ùå –û—Ñ–ª–∞–π–Ω';
      }
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = `üñ•Ô∏è <b>–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n`;
      
      message += `<b>–°–µ—Ä–≤–µ—Ä:</b>\n`;
      message += `‚è±Ô∏è Uptime: <b>${uptimeFormatted}</b>\n`;
      message += `üíæ –ü–∞–º—è—Ç—å: <b>${freeMemoryGB}/${totalMemoryGB} –ì–ë</b> —Å–≤–æ–±–æ–¥–Ω–æ\n`;
      message += `‚ö° –ó–∞–≥—Ä—É–∑–∫–∞ CPU: <b>${cpuUsage}</b>\n`;
      message += `üíª –û–°: <b>${os.platform()} ${os.release()}</b>\n\n`;
      
      message += `<b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b>\n`;
      message += `üîÑ –°—Ç–∞—Ç—É—Å: <b>${dbStatus}</b>\n\n`;
      
      message += `<b>–°–µ—Ä–≤–∏—Å—ã:</b>\n`;
      message += `ü§ñ Telegram –±–æ—Ç: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n`;
      message += `üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n`;
      message += `üé• WebRTC: ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç\n`;
      
      // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: 'admin:system_refresh' },
          { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: 'admin:system_details' }
        ],
        [
          { text: 'üìë –õ–æ–≥–∏', callback_data: 'admin:system_logs' },
          { text: 'üîß –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', callback_data: 'admin:system_maintenance' }
        ],
        [
          { text: '¬´ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin:back' }
        ]
      ];
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const sentMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
      state.lastMenuMessageId = sentMessage.message_id;
    } catch (error) {
      console.error('Error sending admin system panel:', error);
      await this.bot?.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
  }

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞
  async stop(): Promise<void> {
    if (this.bot) {
      this.bot.stopPolling();
      this.isInitialized = false;
      console.log('Telegram bot stopped');
    }
  }
  
  // === –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –ö–ê–ë–ò–ù–ï–¢–ê –°–£–ü–ï–†-–ê–î–ú–ò–ù–ê ===

  // –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async showUserDetails(chatId: number, admin: User, userId: number) {
    if (!this.bot) return;
    
    try {
      const state = this.getUserState(chatId);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const userInfo = await db.select()
        .from(users)
        .where(eq(users.id, userId))
        .limit(1);
        
      if (userInfo.length === 0) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        await this.showAdminUsers(chatId, admin);
        return;
      }
      
      const user = userInfo[0];
      
      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userConfs = await db.select({ count: sql`count(*)` })
        .from(conferences)
        .where(eq(conferences.userId, user.id));
        
      const activeSubscription = user.subscriptionType === 'pro';
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const message = `
üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>

<b>ID:</b> ${user.id}
<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> ${user.username}
<b>Email:</b> ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}
<b>–¢–µ–ª–µ–≥—Ä–∞–º ID:</b> ${user.telegramId || '–ù–µ –ø—Ä–∏–≤—è–∑–∞–Ω'}
<b>–†–æ–ª—å:</b> ${this.formatUserRole(user.role)}
<b>–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏:</b> ${user.subscriptionType === 'pro' ? 'üëë Pro' : 'üåô Free'}
<b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:</b> ${activeSubscription && user.subscriptionExpiresAt ? new Date(user.subscriptionExpiresAt).toLocaleDateString('ru-RU') : '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'}
<b>–ë–∞–ª–∞–Ω—Å:</b> ${user.balance || 0} —Ä—É–±.

<b>–°–æ–∑–¥–∞–Ω–æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–π:</b> ${userConfs[0].count}
<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> ${new Date(user.createdAt).toLocaleDateString('ru-RU')}
      `;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: '‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å', callback_data: `admin:user_edit:${user.id}` },
          { text: '‚ùå –£–¥–∞–ª–∏—Ç—å', callback_data: `admin:user_delete:${user.id}` }
        ],
        [
          { text: admin.role === 'superadmin' ? 'üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º' : 'üëë –ü–æ–≤—ã—Å–∏—Ç—å', callback_data: `admin:user_promote:${user.id}` },
          { text: 'üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: `admin:user_ban:${user.id}` }
        ],
        [
          { text: 'üí∞ –ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data: `admin:user_balance:${user.id}` },
          { text: 'üåü –í—ã–¥–∞—Ç—å Pro-—Å—Ç–∞—Ç—É—Å', callback_data: `admin:user_give_pro:${user.id}` }
        ],
        [
          { text: '¬´ –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', callback_data: 'admin:users' }
        ]
      ];
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const sentMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
      state.lastMenuMessageId = sentMessage.message_id;
    } catch (error) {
      console.error('Error showing user details:', error);
      await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.');
      await this.showAdminUsers(chatId, admin);
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async showUserEditForm(chatId: number, admin: User, userId: number) {
    if (!this.bot) return;
    
    try {
      const state = this.getUserState(chatId);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const userInfo = await db.select()
        .from(users)
        .where(eq(users.id, userId))
        .limit(1);
        
      if (userInfo.length === 0) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        await this.showAdminUsers(chatId, admin);
        return;
      }
      
      const user = userInfo[0];
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const message = `
‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>

<b>ID:</b> ${user.id}
<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> ${user.username}
<b>Email:</b> ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}

–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:
      `;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–ø—Ü–∏—è–º–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data: `admin:user_edit_username:${user.id}` },
          { text: 'üìß Email', callback_data: `admin:user_edit_email:${user.id}` }
        ],
        [
          { text: 'üîë –ü–∞—Ä–æ–ª—å', callback_data: `admin:user_edit_password:${user.id}` },
          { text: 'üëë –†–æ–ª—å', callback_data: `admin:user_edit_role:${user.id}` }
        ],
        [
          { text: 'üí∞ –ë–∞–ª–∞–Ω—Å', callback_data: `admin:user_edit_balance:${user.id}` },
          { text: 'üåü –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏', callback_data: `admin:user_edit_subscription:${user.id}` }
        ],
        [
          { text: '¬´ –í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data: `admin:user_view:${user.id}` }
        ]
      ];
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const sentMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
      state.lastMenuMessageId = sentMessage.message_id;
    } catch (error) {
      console.error('Error showing user edit form:', error);
      await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.');
      await this.showAdminUsers(chatId, admin);
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async showUserDeleteConfirmation(chatId: number, admin: User, userId: number) {
    if (!this.bot) return;
    
    try {
      const state = this.getUserState(chatId);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const userInfo = await db.select()
        .from(users)
        .where(eq(users.id, userId))
        .limit(1);
        
      if (userInfo.length === 0) {
        await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.');
        await this.showAdminUsers(chatId, admin);
        return;
      }
      
      const user = userInfo[0];
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º —É–¥–∞–ª–µ–Ω–∏—è
      const message = `
‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>

–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?

<b>ID:</b> ${user.id}
<b>–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> ${user.username}
<b>Email:</b> ${user.email || '–ù–µ —É–∫–∞–∑–∞–Ω'}

–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.
      `;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: '‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å', callback_data: `admin:user_delete_confirm:${user.id}` },
          { text: '‚ùå –û—Ç–º–µ–Ω–∞', callback_data: `admin:user_view:${user.id}` }
        ]
      ];
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
      const sentMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
      state.lastMenuMessageId = sentMessage.message_id;
    } catch (error) {
      console.error('Error showing user delete confirmation:', error);
      await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è.');
      await this.showAdminUsers(chatId, admin);
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  async showAdminStatistics(chatId: number, admin: User) {
    if (!this.bot) return;
    
    try {
      const state = this.getUserState(chatId);
      
      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      const userCount = await db.select({ count: sql`count(*)` }).from(users);
      const newUsersToday = await db.select({ count: sql`count(*)` })
        .from(users)
        .where(sql`DATE(${users.createdAt}) = CURRENT_DATE`);
        
      const proUserCount = await db.select({ count: sql`count(*)` })
        .from(users)
        .where(eq(users.subscriptionType, 'pro'));
        
      const confCount = await db.select({ count: sql`count(*)` }).from(conferences);
      const activeConfCount = await db.select({ count: sql`count(*)` })
        .from(conferences)
        .where(eq(conferences.active, true));
        
      const paymentCount = await db.select({ count: sql`count(*)` }).from(payments);
      const successPaymentCount = await db.select({ count: sql`count(*)` })
        .from(payments)
        .where(eq(payments.status, 'completed'));
        
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–µ–π
      const totalRevenue = await db.select({ total: sql`sum(${payments.amount})` })
        .from(payments)
        .where(eq(payments.status, 'completed'));
        
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
      const message = `
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã</b>

üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: ${userCount[0].count}
‚Ä¢ –ù–æ–≤—ã—Ö —Å–µ–≥–æ–¥–Ω—è: ${newUsersToday[0].count}
‚Ä¢ Pro-–ø–æ–¥–ø–∏—Å–∫–∏: ${proUserCount[0].count} (${Number(userCount[0].count) > 0 ? ((Number(proUserCount[0].count) / Number(userCount[0].count)) * 100).toFixed(1) : 0}%)

üé• <b>–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:</b>
‚Ä¢ –í—Å–µ–≥–æ: ${confCount[0].count}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: ${activeConfCount[0].count}

üí∞ <b>–§–∏–Ω–∞–Ω—Å—ã:</b>
‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${paymentCount[0].count}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${successPaymentCount[0].count}
‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: ${totalRevenue[0].total || 0} —Ä—É–±.
      `;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: 'üìÖ –ü–æ –¥–Ω—è–º', callback_data: 'admin:stats_daily' },
          { text: 'üìà –ì—Ä–∞—Ñ–∏–∫–∏', callback_data: 'admin:stats_charts' }
        ],
        [
          { text: 'üí≤ –î–æ—Ö–æ–¥—ã', callback_data: 'admin:stats_revenue' },
          { text: 'üó£Ô∏è –ö–æ–Ω–≤–µ—Ä—Å–∏—è', callback_data: 'admin:stats_conversion' }
        ],
        [
          { text: '¬´ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin:back' }
        ]
      ];
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
      const sentMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
      state.lastMenuMessageId = sentMessage.message_id;
    } catch (error) {
      console.error('Error showing admin statistics:', error);
      await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
      await this.showAdminPanel(chatId, admin);
    }
  }
  
  // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  async showAdminSettings(chatId: number, admin: User) {
    if (!this.bot) return;
    
    try {
      const state = this.getUserState(chatId);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      // –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const settings = {
        welcomeMessage: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ikarus!',
        notificationEnabled: true,
        maxFreeDuration: 15,
        maxFreeParticipants: 5
      };
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      const message = `
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã</b>

<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:</b>
${settings.welcomeMessage}

<b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> ${settings.notificationEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}

<b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞:</b>
‚Ä¢ –ú–∞–∫—Å. –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏: ${settings.maxFreeDuration} –º–∏–Ω.
‚Ä¢ –ú–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${settings.maxFreeParticipants}

<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</b>
      `;
      
      // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const keyboard: TelegramBot.InlineKeyboardButton[][] = [
        [
          { text: '‚úèÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ', callback_data: 'admin:settings_welcome' },
          { text: settings.notificationEnabled ? 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', 
            callback_data: `admin:settings_toggle_notifications:${!settings.notificationEnabled}` }
        ],
        [
          { text: '‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (Free)', callback_data: 'admin:settings_free_duration' },
          { text: 'üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ (Free)', callback_data: 'admin:settings_free_participants' }
        ],
        [
          { text: 'üîÑ –°–±—Ä–æ—Å–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏', callback_data: 'admin:settings_reset' }
        ],
        [
          { text: '¬´ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å', callback_data: 'admin:back' }
        ]
      ];
      
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
      if (state.lastMenuMessageId) {
        try {
          await this.bot.deleteMessage(chatId, state.lastMenuMessageId);
        } catch (e) {
          console.log('Could not delete previous menu message', e);
        }
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
      const sentMessage = await this.bot.sendMessage(chatId, message, {
        parse_mode: 'HTML',
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
      state.lastMenuMessageId = sentMessage.message_id;
    } catch (error) {
      console.error('Error showing admin settings:', error);
      await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.');
      await this.showAdminPanel(chatId, admin);
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  async saveAdminSettings(chatId: number, admin: User, param: string) {
    if (!this.bot) return;
    
    try {
      // –í —ç—Ç–æ–º –º–µ—Ç–æ–¥–µ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
      // –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ param
      
      await this.bot.sendMessage(chatId, '‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.');
      await this.showAdminSettings(chatId, admin);
    } catch (error) {
      console.error('Error saving admin settings:', error);
      await this.bot.sendMessage(chatId, '‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.');
      await this.showAdminSettings(chatId, admin);
    }
  }
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  private formatUserRole(role: string): string {
    switch (role) {
      case 'user':
        return 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
      case 'host':
        return 'üéôÔ∏è –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä';
      case 'admin':
        return 'üõ°Ô∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
      case 'superadmin':
        return 'üëë –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
      default:
        return role;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
export const telegramService = new TelegramService();